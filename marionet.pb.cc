// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: marionet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "marionet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MarkovInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarkovInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* FutureProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FutureProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayFunRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayFunRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayFunResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayFunResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TryImproveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TryImproveRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TryImproveRequest_Approach_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TryImproveResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TryImproveResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HelperRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HelperRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_marionet_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_marionet_2eproto() {
  protobuf_AddDesc_marionet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "marionet.proto");
  GOOGLE_CHECK(file != NULL);
  MarkovInput_descriptor_ = file->message_type(0);
  static const int MarkovInput_offsets_[1] = {
  };
  MarkovInput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MarkovInput_descriptor_,
      MarkovInput::default_instance_,
      MarkovInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkovInput, _has_bits_[0]),
      -1,
      -1,
      sizeof(MarkovInput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkovInput, _internal_metadata_),
      -1);
  FutureProto_descriptor_ = file->message_type(1);
  static const int FutureProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureProto, inputs_),
  };
  FutureProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FutureProto_descriptor_,
      FutureProto::default_instance_,
      FutureProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureProto, _has_bits_[0]),
      -1,
      -1,
      sizeof(FutureProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureProto, _internal_metadata_),
      -1);
  PlayFunRequest_descriptor_ = file->message_type(2);
  static const int PlayFunRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayFunRequest, current_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayFunRequest, next_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayFunRequest, futures_),
  };
  PlayFunRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayFunRequest_descriptor_,
      PlayFunRequest::default_instance_,
      PlayFunRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayFunRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(PlayFunRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayFunRequest, _internal_metadata_),
      -1);
  PlayFunResponse_descriptor_ = file->message_type(3);
  static const int PlayFunResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayFunResponse, immediate_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayFunResponse, best_future_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayFunResponse, worst_future_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayFunResponse, futures_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayFunResponse, futurescores_),
  };
  PlayFunResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayFunResponse_descriptor_,
      PlayFunResponse::default_instance_,
      PlayFunResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayFunResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(PlayFunResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayFunResponse, _internal_metadata_),
      -1);
  TryImproveRequest_descriptor_ = file->message_type(4);
  static const int TryImproveRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryImproveRequest, start_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryImproveRequest, improveme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryImproveRequest, end_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryImproveRequest, end_integral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryImproveRequest, approach_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryImproveRequest, seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryImproveRequest, iters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryImproveRequest, maxbest_),
  };
  TryImproveRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TryImproveRequest_descriptor_,
      TryImproveRequest::default_instance_,
      TryImproveRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryImproveRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(TryImproveRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryImproveRequest, _internal_metadata_),
      -1);
  TryImproveRequest_Approach_descriptor_ = TryImproveRequest_descriptor_->enum_type(0);
  TryImproveResponse_descriptor_ = file->message_type(5);
  static const int TryImproveResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryImproveResponse, inputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryImproveResponse, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryImproveResponse, iters_tried_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryImproveResponse, iters_better_),
  };
  TryImproveResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TryImproveResponse_descriptor_,
      TryImproveResponse::default_instance_,
      TryImproveResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryImproveResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(TryImproveResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryImproveResponse, _internal_metadata_),
      -1);
  HelperRequest_descriptor_ = file->message_type(6);
  static const int HelperRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelperRequest, playfun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelperRequest, tryimprove_),
  };
  HelperRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HelperRequest_descriptor_,
      HelperRequest::default_instance_,
      HelperRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelperRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(HelperRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelperRequest, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_marionet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MarkovInput_descriptor_, &MarkovInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FutureProto_descriptor_, &FutureProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayFunRequest_descriptor_, &PlayFunRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayFunResponse_descriptor_, &PlayFunResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TryImproveRequest_descriptor_, &TryImproveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TryImproveResponse_descriptor_, &TryImproveResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HelperRequest_descriptor_, &HelperRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_marionet_2eproto() {
  delete MarkovInput::default_instance_;
  delete MarkovInput_reflection_;
  delete FutureProto::default_instance_;
  delete FutureProto_reflection_;
  delete PlayFunRequest::default_instance_;
  delete PlayFunRequest_reflection_;
  delete PlayFunResponse::default_instance_;
  delete PlayFunResponse_reflection_;
  delete TryImproveRequest::default_instance_;
  delete TryImproveRequest_reflection_;
  delete TryImproveResponse::default_instance_;
  delete TryImproveResponse_reflection_;
  delete HelperRequest::default_instance_;
  delete HelperRequest_reflection_;
}

void protobuf_AddDesc_marionet_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_marionet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016marionet.proto\"\r\n\013MarkovInput\"\035\n\013Futur"
    "eProto\022\016\n\006inputs\030\004 \001(\014\"T\n\016PlayFunRequest"
    "\022\025\n\rcurrent_state\030\001 \001(\014\022\014\n\004next\030\002 \001(\014\022\035\n"
    "\007futures\030\003 \003(\0132\014.FutureProto\"\216\001\n\017PlayFun"
    "Response\022\027\n\017immediate_score\030\001 \001(\001\022\031\n\021bes"
    "t_future_score\030\002 \001(\001\022\032\n\022worst_future_sco"
    "re\030\003 \001(\001\022\025\n\rfutures_score\030\004 \001(\001\022\024\n\014futur"
    "escores\030\005 \003(\001\"\200\002\n\021TryImproveRequest\022\023\n\013s"
    "tart_state\030\001 \001(\014\022\021\n\timproveme\030\002 \001(\014\022\021\n\te"
    "nd_state\030\003 \001(\014\022\024\n\014end_integral\030\004 \001(\001\022-\n\010"
    "approach\030\005 \001(\0162\033.TryImproveRequest.Appro"
    "ach\022\014\n\004seed\030\006 \001(\t\022\r\n\005iters\030\007 \001(\005\022\017\n\007maxb"
    "est\030\010 \001(\005\"=\n\010Approach\022\n\n\006RANDOM\020\000\022\r\n\tOPP"
    "OSITES\020\001\022\014\n\010ABLATION\020\002\022\010\n\004CHOP\020\003\"^\n\022TryI"
    "mproveResponse\022\016\n\006inputs\030\001 \003(\014\022\r\n\005score\030"
    "\002 \003(\001\022\023\n\013iters_tried\030\003 \001(\005\022\024\n\014iters_bett"
    "er\030\004 \001(\005\"Y\n\rHelperRequest\022 \n\007playfun\030\001 \001"
    "(\0132\017.PlayFunRequest\022&\n\ntryimprove\030\002 \001(\0132"
    "\022.TryImproveRequest", 739);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "marionet.proto", &protobuf_RegisterTypes);
  MarkovInput::default_instance_ = new MarkovInput();
  FutureProto::default_instance_ = new FutureProto();
  PlayFunRequest::default_instance_ = new PlayFunRequest();
  PlayFunResponse::default_instance_ = new PlayFunResponse();
  TryImproveRequest::default_instance_ = new TryImproveRequest();
  TryImproveResponse::default_instance_ = new TryImproveResponse();
  HelperRequest::default_instance_ = new HelperRequest();
  MarkovInput::default_instance_->InitAsDefaultInstance();
  FutureProto::default_instance_->InitAsDefaultInstance();
  PlayFunRequest::default_instance_->InitAsDefaultInstance();
  PlayFunResponse::default_instance_->InitAsDefaultInstance();
  TryImproveRequest::default_instance_->InitAsDefaultInstance();
  TryImproveResponse::default_instance_->InitAsDefaultInstance();
  HelperRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_marionet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_marionet_2eproto {
  StaticDescriptorInitializer_marionet_2eproto() {
    protobuf_AddDesc_marionet_2eproto();
  }
} static_descriptor_initializer_marionet_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarkovInput::MarkovInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MarkovInput)
}

void MarkovInput::InitAsDefaultInstance() {
}

MarkovInput::MarkovInput(const MarkovInput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MarkovInput)
}

void MarkovInput::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarkovInput::~MarkovInput() {
  // @@protoc_insertion_point(destructor:MarkovInput)
  SharedDtor();
}

void MarkovInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarkovInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarkovInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarkovInput_descriptor_;
}

const MarkovInput& MarkovInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marionet_2eproto();
  return *default_instance_;
}

MarkovInput* MarkovInput::default_instance_ = NULL;

MarkovInput* MarkovInput::New(::google::protobuf::Arena* arena) const {
  MarkovInput* n = new MarkovInput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MarkovInput::Clear() {
// @@protoc_insertion_point(message_clear_start:MarkovInput)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MarkovInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MarkovInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:MarkovInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MarkovInput)
  return false;
#undef DO_
}

void MarkovInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MarkovInput)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MarkovInput)
}

::google::protobuf::uint8* MarkovInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MarkovInput)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MarkovInput)
  return target;
}

int MarkovInput::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MarkovInput)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarkovInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MarkovInput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MarkovInput* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MarkovInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MarkovInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MarkovInput)
    MergeFrom(*source);
  }
}

void MarkovInput::MergeFrom(const MarkovInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MarkovInput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MarkovInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MarkovInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarkovInput::CopyFrom(const MarkovInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MarkovInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkovInput::IsInitialized() const {

  return true;
}

void MarkovInput::Swap(MarkovInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarkovInput::InternalSwap(MarkovInput* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MarkovInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarkovInput_descriptor_;
  metadata.reflection = MarkovInput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MarkovInput

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureProto::kInputsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureProto::FutureProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FutureProto)
}

void FutureProto::InitAsDefaultInstance() {
}

FutureProto::FutureProto(const FutureProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FutureProto)
}

void FutureProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  inputs_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FutureProto::~FutureProto() {
  // @@protoc_insertion_point(destructor:FutureProto)
  SharedDtor();
}

void FutureProto::SharedDtor() {
  inputs_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FutureProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FutureProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FutureProto_descriptor_;
}

const FutureProto& FutureProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marionet_2eproto();
  return *default_instance_;
}

FutureProto* FutureProto::default_instance_ = NULL;

FutureProto* FutureProto::New(::google::protobuf::Arena* arena) const {
  FutureProto* n = new FutureProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FutureProto::Clear() {
// @@protoc_insertion_point(message_clear_start:FutureProto)
  if (has_inputs()) {
    inputs_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FutureProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FutureProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes inputs = 4;
      case 4: {
        if (tag == 34) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_inputs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FutureProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FutureProto)
  return false;
#undef DO_
}

void FutureProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FutureProto)
  // optional bytes inputs = 4;
  if (has_inputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->inputs(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FutureProto)
}

::google::protobuf::uint8* FutureProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FutureProto)
  // optional bytes inputs = 4;
  if (has_inputs()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->inputs(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FutureProto)
  return target;
}

int FutureProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:FutureProto)
  int total_size = 0;

  // optional bytes inputs = 4;
  if (has_inputs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->inputs());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FutureProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FutureProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FutureProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FutureProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FutureProto)
    MergeFrom(*source);
  }
}

void FutureProto::MergeFrom(const FutureProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FutureProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inputs()) {
      set_has_inputs();
      inputs_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inputs_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FutureProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FutureProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureProto::CopyFrom(const FutureProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FutureProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureProto::IsInitialized() const {

  return true;
}

void FutureProto::Swap(FutureProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureProto::InternalSwap(FutureProto* other) {
  inputs_.Swap(&other->inputs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FutureProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FutureProto_descriptor_;
  metadata.reflection = FutureProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FutureProto

// optional bytes inputs = 4;
bool FutureProto::has_inputs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FutureProto::set_has_inputs() {
  _has_bits_[0] |= 0x00000001u;
}
void FutureProto::clear_has_inputs() {
  _has_bits_[0] &= ~0x00000001u;
}
void FutureProto::clear_inputs() {
  inputs_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_inputs();
}
 const ::std::string& FutureProto::inputs() const {
  // @@protoc_insertion_point(field_get:FutureProto.inputs)
  return inputs_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FutureProto::set_inputs(const ::std::string& value) {
  set_has_inputs();
  inputs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FutureProto.inputs)
}
 void FutureProto::set_inputs(const char* value) {
  set_has_inputs();
  inputs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FutureProto.inputs)
}
 void FutureProto::set_inputs(const void* value, size_t size) {
  set_has_inputs();
  inputs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FutureProto.inputs)
}
 ::std::string* FutureProto::mutable_inputs() {
  set_has_inputs();
  // @@protoc_insertion_point(field_mutable:FutureProto.inputs)
  return inputs_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FutureProto::release_inputs() {
  // @@protoc_insertion_point(field_release:FutureProto.inputs)
  clear_has_inputs();
  return inputs_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FutureProto::set_allocated_inputs(::std::string* inputs) {
  if (inputs != NULL) {
    set_has_inputs();
  } else {
    clear_has_inputs();
  }
  inputs_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inputs);
  // @@protoc_insertion_point(field_set_allocated:FutureProto.inputs)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayFunRequest::kCurrentStateFieldNumber;
const int PlayFunRequest::kNextFieldNumber;
const int PlayFunRequest::kFuturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayFunRequest::PlayFunRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayFunRequest)
}

void PlayFunRequest::InitAsDefaultInstance() {
}

PlayFunRequest::PlayFunRequest(const PlayFunRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlayFunRequest)
}

void PlayFunRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  current_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayFunRequest::~PlayFunRequest() {
  // @@protoc_insertion_point(destructor:PlayFunRequest)
  SharedDtor();
}

void PlayFunRequest::SharedDtor() {
  current_state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PlayFunRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayFunRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayFunRequest_descriptor_;
}

const PlayFunRequest& PlayFunRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marionet_2eproto();
  return *default_instance_;
}

PlayFunRequest* PlayFunRequest::default_instance_ = NULL;

PlayFunRequest* PlayFunRequest::New(::google::protobuf::Arena* arena) const {
  PlayFunRequest* n = new PlayFunRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayFunRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayFunRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_current_state()) {
      current_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_next()) {
      next_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  futures_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlayFunRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlayFunRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes current_state = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_current_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_next;
        break;
      }

      // optional bytes next = 2;
      case 2: {
        if (tag == 18) {
         parse_next:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_next()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_futures;
        break;
      }

      // repeated .FutureProto futures = 3;
      case 3: {
        if (tag == 26) {
         parse_futures:
          DO_(input->IncrementRecursionDepth());
         parse_loop_futures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_futures()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_futures;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayFunRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayFunRequest)
  return false;
#undef DO_
}

void PlayFunRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayFunRequest)
  // optional bytes current_state = 1;
  if (has_current_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->current_state(), output);
  }

  // optional bytes next = 2;
  if (has_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->next(), output);
  }

  // repeated .FutureProto futures = 3;
  for (unsigned int i = 0, n = this->futures_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->futures(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PlayFunRequest)
}

::google::protobuf::uint8* PlayFunRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayFunRequest)
  // optional bytes current_state = 1;
  if (has_current_state()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->current_state(), target);
  }

  // optional bytes next = 2;
  if (has_next()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->next(), target);
  }

  // repeated .FutureProto futures = 3;
  for (unsigned int i = 0, n = this->futures_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->futures(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayFunRequest)
  return target;
}

int PlayFunRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:PlayFunRequest)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes current_state = 1;
    if (has_current_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->current_state());
    }

    // optional bytes next = 2;
    if (has_next()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->next());
    }

  }
  // repeated .FutureProto futures = 3;
  total_size += 1 * this->futures_size();
  for (int i = 0; i < this->futures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->futures(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayFunRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayFunRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlayFunRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayFunRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayFunRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayFunRequest)
    MergeFrom(*source);
  }
}

void PlayFunRequest::MergeFrom(const PlayFunRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayFunRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  futures_.MergeFrom(from.futures_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current_state()) {
      set_has_current_state();
      current_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.current_state_);
    }
    if (from.has_next()) {
      set_has_next();
      next_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PlayFunRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayFunRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayFunRequest::CopyFrom(const PlayFunRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayFunRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayFunRequest::IsInitialized() const {

  return true;
}

void PlayFunRequest::Swap(PlayFunRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayFunRequest::InternalSwap(PlayFunRequest* other) {
  current_state_.Swap(&other->current_state_);
  next_.Swap(&other->next_);
  futures_.UnsafeArenaSwap(&other->futures_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayFunRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayFunRequest_descriptor_;
  metadata.reflection = PlayFunRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayFunRequest

// optional bytes current_state = 1;
bool PlayFunRequest::has_current_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayFunRequest::set_has_current_state() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayFunRequest::clear_has_current_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayFunRequest::clear_current_state() {
  current_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_current_state();
}
 const ::std::string& PlayFunRequest::current_state() const {
  // @@protoc_insertion_point(field_get:PlayFunRequest.current_state)
  return current_state_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayFunRequest::set_current_state(const ::std::string& value) {
  set_has_current_state();
  current_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayFunRequest.current_state)
}
 void PlayFunRequest::set_current_state(const char* value) {
  set_has_current_state();
  current_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayFunRequest.current_state)
}
 void PlayFunRequest::set_current_state(const void* value, size_t size) {
  set_has_current_state();
  current_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayFunRequest.current_state)
}
 ::std::string* PlayFunRequest::mutable_current_state() {
  set_has_current_state();
  // @@protoc_insertion_point(field_mutable:PlayFunRequest.current_state)
  return current_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlayFunRequest::release_current_state() {
  // @@protoc_insertion_point(field_release:PlayFunRequest.current_state)
  clear_has_current_state();
  return current_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayFunRequest::set_allocated_current_state(::std::string* current_state) {
  if (current_state != NULL) {
    set_has_current_state();
  } else {
    clear_has_current_state();
  }
  current_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), current_state);
  // @@protoc_insertion_point(field_set_allocated:PlayFunRequest.current_state)
}

// optional bytes next = 2;
bool PlayFunRequest::has_next() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayFunRequest::set_has_next() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayFunRequest::clear_has_next() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayFunRequest::clear_next() {
  next_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_next();
}
 const ::std::string& PlayFunRequest::next() const {
  // @@protoc_insertion_point(field_get:PlayFunRequest.next)
  return next_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayFunRequest::set_next(const ::std::string& value) {
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayFunRequest.next)
}
 void PlayFunRequest::set_next(const char* value) {
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayFunRequest.next)
}
 void PlayFunRequest::set_next(const void* value, size_t size) {
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayFunRequest.next)
}
 ::std::string* PlayFunRequest::mutable_next() {
  set_has_next();
  // @@protoc_insertion_point(field_mutable:PlayFunRequest.next)
  return next_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlayFunRequest::release_next() {
  // @@protoc_insertion_point(field_release:PlayFunRequest.next)
  clear_has_next();
  return next_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayFunRequest::set_allocated_next(::std::string* next) {
  if (next != NULL) {
    set_has_next();
  } else {
    clear_has_next();
  }
  next_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next);
  // @@protoc_insertion_point(field_set_allocated:PlayFunRequest.next)
}

// repeated .FutureProto futures = 3;
int PlayFunRequest::futures_size() const {
  return futures_.size();
}
void PlayFunRequest::clear_futures() {
  futures_.Clear();
}
const ::FutureProto& PlayFunRequest::futures(int index) const {
  // @@protoc_insertion_point(field_get:PlayFunRequest.futures)
  return futures_.Get(index);
}
::FutureProto* PlayFunRequest::mutable_futures(int index) {
  // @@protoc_insertion_point(field_mutable:PlayFunRequest.futures)
  return futures_.Mutable(index);
}
::FutureProto* PlayFunRequest::add_futures() {
  // @@protoc_insertion_point(field_add:PlayFunRequest.futures)
  return futures_.Add();
}
::google::protobuf::RepeatedPtrField< ::FutureProto >*
PlayFunRequest::mutable_futures() {
  // @@protoc_insertion_point(field_mutable_list:PlayFunRequest.futures)
  return &futures_;
}
const ::google::protobuf::RepeatedPtrField< ::FutureProto >&
PlayFunRequest::futures() const {
  // @@protoc_insertion_point(field_list:PlayFunRequest.futures)
  return futures_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayFunResponse::kImmediateScoreFieldNumber;
const int PlayFunResponse::kBestFutureScoreFieldNumber;
const int PlayFunResponse::kWorstFutureScoreFieldNumber;
const int PlayFunResponse::kFuturesScoreFieldNumber;
const int PlayFunResponse::kFuturescoresFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayFunResponse::PlayFunResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayFunResponse)
}

void PlayFunResponse::InitAsDefaultInstance() {
}

PlayFunResponse::PlayFunResponse(const PlayFunResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlayFunResponse)
}

void PlayFunResponse::SharedCtor() {
  _cached_size_ = 0;
  immediate_score_ = 0;
  best_future_score_ = 0;
  worst_future_score_ = 0;
  futures_score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayFunResponse::~PlayFunResponse() {
  // @@protoc_insertion_point(destructor:PlayFunResponse)
  SharedDtor();
}

void PlayFunResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayFunResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayFunResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayFunResponse_descriptor_;
}

const PlayFunResponse& PlayFunResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marionet_2eproto();
  return *default_instance_;
}

PlayFunResponse* PlayFunResponse::default_instance_ = NULL;

PlayFunResponse* PlayFunResponse::New(::google::protobuf::Arena* arena) const {
  PlayFunResponse* n = new PlayFunResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayFunResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayFunResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlayFunResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayFunResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(immediate_score_, futures_score_);

#undef ZR_HELPER_
#undef ZR_

  futurescores_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlayFunResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlayFunResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double immediate_score = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &immediate_score_)));
          set_has_immediate_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_best_future_score;
        break;
      }

      // optional double best_future_score = 2;
      case 2: {
        if (tag == 17) {
         parse_best_future_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &best_future_score_)));
          set_has_best_future_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_worst_future_score;
        break;
      }

      // optional double worst_future_score = 3;
      case 3: {
        if (tag == 25) {
         parse_worst_future_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &worst_future_score_)));
          set_has_worst_future_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_futures_score;
        break;
      }

      // optional double futures_score = 4;
      case 4: {
        if (tag == 33) {
         parse_futures_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &futures_score_)));
          set_has_futures_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_futurescores;
        break;
      }

      // repeated double futurescores = 5;
      case 5: {
        if (tag == 41) {
         parse_futurescores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41, input, this->mutable_futurescores())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_futurescores())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_futurescores;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayFunResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayFunResponse)
  return false;
#undef DO_
}

void PlayFunResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayFunResponse)
  // optional double immediate_score = 1;
  if (has_immediate_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->immediate_score(), output);
  }

  // optional double best_future_score = 2;
  if (has_best_future_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->best_future_score(), output);
  }

  // optional double worst_future_score = 3;
  if (has_worst_future_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->worst_future_score(), output);
  }

  // optional double futures_score = 4;
  if (has_futures_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->futures_score(), output);
  }

  // repeated double futurescores = 5;
  for (int i = 0; i < this->futurescores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->futurescores(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PlayFunResponse)
}

::google::protobuf::uint8* PlayFunResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayFunResponse)
  // optional double immediate_score = 1;
  if (has_immediate_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->immediate_score(), target);
  }

  // optional double best_future_score = 2;
  if (has_best_future_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->best_future_score(), target);
  }

  // optional double worst_future_score = 3;
  if (has_worst_future_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->worst_future_score(), target);
  }

  // optional double futures_score = 4;
  if (has_futures_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->futures_score(), target);
  }

  // repeated double futurescores = 5;
  for (int i = 0; i < this->futurescores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(5, this->futurescores(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayFunResponse)
  return target;
}

int PlayFunResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:PlayFunResponse)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional double immediate_score = 1;
    if (has_immediate_score()) {
      total_size += 1 + 8;
    }

    // optional double best_future_score = 2;
    if (has_best_future_score()) {
      total_size += 1 + 8;
    }

    // optional double worst_future_score = 3;
    if (has_worst_future_score()) {
      total_size += 1 + 8;
    }

    // optional double futures_score = 4;
    if (has_futures_score()) {
      total_size += 1 + 8;
    }

  }
  // repeated double futurescores = 5;
  {
    int data_size = 0;
    data_size = 8 * this->futurescores_size();
    total_size += 1 * this->futurescores_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayFunResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayFunResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlayFunResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayFunResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayFunResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayFunResponse)
    MergeFrom(*source);
  }
}

void PlayFunResponse::MergeFrom(const PlayFunResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayFunResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  futurescores_.MergeFrom(from.futurescores_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_immediate_score()) {
      set_immediate_score(from.immediate_score());
    }
    if (from.has_best_future_score()) {
      set_best_future_score(from.best_future_score());
    }
    if (from.has_worst_future_score()) {
      set_worst_future_score(from.worst_future_score());
    }
    if (from.has_futures_score()) {
      set_futures_score(from.futures_score());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PlayFunResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayFunResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayFunResponse::CopyFrom(const PlayFunResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayFunResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayFunResponse::IsInitialized() const {

  return true;
}

void PlayFunResponse::Swap(PlayFunResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayFunResponse::InternalSwap(PlayFunResponse* other) {
  std::swap(immediate_score_, other->immediate_score_);
  std::swap(best_future_score_, other->best_future_score_);
  std::swap(worst_future_score_, other->worst_future_score_);
  std::swap(futures_score_, other->futures_score_);
  futurescores_.UnsafeArenaSwap(&other->futurescores_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayFunResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayFunResponse_descriptor_;
  metadata.reflection = PlayFunResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayFunResponse

// optional double immediate_score = 1;
bool PlayFunResponse::has_immediate_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayFunResponse::set_has_immediate_score() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayFunResponse::clear_has_immediate_score() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayFunResponse::clear_immediate_score() {
  immediate_score_ = 0;
  clear_has_immediate_score();
}
 double PlayFunResponse::immediate_score() const {
  // @@protoc_insertion_point(field_get:PlayFunResponse.immediate_score)
  return immediate_score_;
}
 void PlayFunResponse::set_immediate_score(double value) {
  set_has_immediate_score();
  immediate_score_ = value;
  // @@protoc_insertion_point(field_set:PlayFunResponse.immediate_score)
}

// optional double best_future_score = 2;
bool PlayFunResponse::has_best_future_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayFunResponse::set_has_best_future_score() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayFunResponse::clear_has_best_future_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayFunResponse::clear_best_future_score() {
  best_future_score_ = 0;
  clear_has_best_future_score();
}
 double PlayFunResponse::best_future_score() const {
  // @@protoc_insertion_point(field_get:PlayFunResponse.best_future_score)
  return best_future_score_;
}
 void PlayFunResponse::set_best_future_score(double value) {
  set_has_best_future_score();
  best_future_score_ = value;
  // @@protoc_insertion_point(field_set:PlayFunResponse.best_future_score)
}

// optional double worst_future_score = 3;
bool PlayFunResponse::has_worst_future_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlayFunResponse::set_has_worst_future_score() {
  _has_bits_[0] |= 0x00000004u;
}
void PlayFunResponse::clear_has_worst_future_score() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlayFunResponse::clear_worst_future_score() {
  worst_future_score_ = 0;
  clear_has_worst_future_score();
}
 double PlayFunResponse::worst_future_score() const {
  // @@protoc_insertion_point(field_get:PlayFunResponse.worst_future_score)
  return worst_future_score_;
}
 void PlayFunResponse::set_worst_future_score(double value) {
  set_has_worst_future_score();
  worst_future_score_ = value;
  // @@protoc_insertion_point(field_set:PlayFunResponse.worst_future_score)
}

// optional double futures_score = 4;
bool PlayFunResponse::has_futures_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PlayFunResponse::set_has_futures_score() {
  _has_bits_[0] |= 0x00000008u;
}
void PlayFunResponse::clear_has_futures_score() {
  _has_bits_[0] &= ~0x00000008u;
}
void PlayFunResponse::clear_futures_score() {
  futures_score_ = 0;
  clear_has_futures_score();
}
 double PlayFunResponse::futures_score() const {
  // @@protoc_insertion_point(field_get:PlayFunResponse.futures_score)
  return futures_score_;
}
 void PlayFunResponse::set_futures_score(double value) {
  set_has_futures_score();
  futures_score_ = value;
  // @@protoc_insertion_point(field_set:PlayFunResponse.futures_score)
}

// repeated double futurescores = 5;
int PlayFunResponse::futurescores_size() const {
  return futurescores_.size();
}
void PlayFunResponse::clear_futurescores() {
  futurescores_.Clear();
}
 double PlayFunResponse::futurescores(int index) const {
  // @@protoc_insertion_point(field_get:PlayFunResponse.futurescores)
  return futurescores_.Get(index);
}
 void PlayFunResponse::set_futurescores(int index, double value) {
  futurescores_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlayFunResponse.futurescores)
}
 void PlayFunResponse::add_futurescores(double value) {
  futurescores_.Add(value);
  // @@protoc_insertion_point(field_add:PlayFunResponse.futurescores)
}
 const ::google::protobuf::RepeatedField< double >&
PlayFunResponse::futurescores() const {
  // @@protoc_insertion_point(field_list:PlayFunResponse.futurescores)
  return futurescores_;
}
 ::google::protobuf::RepeatedField< double >*
PlayFunResponse::mutable_futurescores() {
  // @@protoc_insertion_point(field_mutable_list:PlayFunResponse.futurescores)
  return &futurescores_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* TryImproveRequest_Approach_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TryImproveRequest_Approach_descriptor_;
}
bool TryImproveRequest_Approach_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TryImproveRequest_Approach TryImproveRequest::RANDOM;
const TryImproveRequest_Approach TryImproveRequest::OPPOSITES;
const TryImproveRequest_Approach TryImproveRequest::ABLATION;
const TryImproveRequest_Approach TryImproveRequest::CHOP;
const TryImproveRequest_Approach TryImproveRequest::Approach_MIN;
const TryImproveRequest_Approach TryImproveRequest::Approach_MAX;
const int TryImproveRequest::Approach_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TryImproveRequest::kStartStateFieldNumber;
const int TryImproveRequest::kImprovemeFieldNumber;
const int TryImproveRequest::kEndStateFieldNumber;
const int TryImproveRequest::kEndIntegralFieldNumber;
const int TryImproveRequest::kApproachFieldNumber;
const int TryImproveRequest::kSeedFieldNumber;
const int TryImproveRequest::kItersFieldNumber;
const int TryImproveRequest::kMaxbestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TryImproveRequest::TryImproveRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TryImproveRequest)
}

void TryImproveRequest::InitAsDefaultInstance() {
}

TryImproveRequest::TryImproveRequest(const TryImproveRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TryImproveRequest)
}

void TryImproveRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  improveme_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_integral_ = 0;
  approach_ = 0;
  seed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iters_ = 0;
  maxbest_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TryImproveRequest::~TryImproveRequest() {
  // @@protoc_insertion_point(destructor:TryImproveRequest)
  SharedDtor();
}

void TryImproveRequest::SharedDtor() {
  start_state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  improveme_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seed_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TryImproveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TryImproveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TryImproveRequest_descriptor_;
}

const TryImproveRequest& TryImproveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marionet_2eproto();
  return *default_instance_;
}

TryImproveRequest* TryImproveRequest::default_instance_ = NULL;

TryImproveRequest* TryImproveRequest::New(::google::protobuf::Arena* arena) const {
  TryImproveRequest* n = new TryImproveRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TryImproveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:TryImproveRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TryImproveRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TryImproveRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(approach_, maxbest_);
    if (has_start_state()) {
      start_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_improveme()) {
      improveme_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_end_state()) {
      end_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    end_integral_ = 0;
    if (has_seed()) {
      seed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TryImproveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TryImproveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_state = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_improveme;
        break;
      }

      // optional bytes improveme = 2;
      case 2: {
        if (tag == 18) {
         parse_improveme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_improveme()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_end_state;
        break;
      }

      // optional bytes end_state = 3;
      case 3: {
        if (tag == 26) {
         parse_end_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_end_integral;
        break;
      }

      // optional double end_integral = 4;
      case 4: {
        if (tag == 33) {
         parse_end_integral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_integral_)));
          set_has_end_integral();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_approach;
        break;
      }

      // optional .TryImproveRequest.Approach approach = 5;
      case 5: {
        if (tag == 40) {
         parse_approach:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TryImproveRequest_Approach_IsValid(value)) {
            set_approach(static_cast< ::TryImproveRequest_Approach >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_seed;
        break;
      }

      // optional string seed = 6;
      case 6: {
        if (tag == 50) {
         parse_seed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->seed().data(), this->seed().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TryImproveRequest.seed");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_iters;
        break;
      }

      // optional int32 iters = 7;
      case 7: {
        if (tag == 56) {
         parse_iters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iters_)));
          set_has_iters();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_maxbest;
        break;
      }

      // optional int32 maxbest = 8;
      case 8: {
        if (tag == 64) {
         parse_maxbest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxbest_)));
          set_has_maxbest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TryImproveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TryImproveRequest)
  return false;
#undef DO_
}

void TryImproveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TryImproveRequest)
  // optional bytes start_state = 1;
  if (has_start_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_state(), output);
  }

  // optional bytes improveme = 2;
  if (has_improveme()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->improveme(), output);
  }

  // optional bytes end_state = 3;
  if (has_end_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->end_state(), output);
  }

  // optional double end_integral = 4;
  if (has_end_integral()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->end_integral(), output);
  }

  // optional .TryImproveRequest.Approach approach = 5;
  if (has_approach()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->approach(), output);
  }

  // optional string seed = 6;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seed().data(), this->seed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TryImproveRequest.seed");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->seed(), output);
  }

  // optional int32 iters = 7;
  if (has_iters()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->iters(), output);
  }

  // optional int32 maxbest = 8;
  if (has_maxbest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->maxbest(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TryImproveRequest)
}

::google::protobuf::uint8* TryImproveRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TryImproveRequest)
  // optional bytes start_state = 1;
  if (has_start_state()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_state(), target);
  }

  // optional bytes improveme = 2;
  if (has_improveme()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->improveme(), target);
  }

  // optional bytes end_state = 3;
  if (has_end_state()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->end_state(), target);
  }

  // optional double end_integral = 4;
  if (has_end_integral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->end_integral(), target);
  }

  // optional .TryImproveRequest.Approach approach = 5;
  if (has_approach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->approach(), target);
  }

  // optional string seed = 6;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seed().data(), this->seed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TryImproveRequest.seed");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->seed(), target);
  }

  // optional int32 iters = 7;
  if (has_iters()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->iters(), target);
  }

  // optional int32 maxbest = 8;
  if (has_maxbest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->maxbest(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TryImproveRequest)
  return target;
}

int TryImproveRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:TryImproveRequest)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes start_state = 1;
    if (has_start_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_state());
    }

    // optional bytes improveme = 2;
    if (has_improveme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->improveme());
    }

    // optional bytes end_state = 3;
    if (has_end_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_state());
    }

    // optional double end_integral = 4;
    if (has_end_integral()) {
      total_size += 1 + 8;
    }

    // optional .TryImproveRequest.Approach approach = 5;
    if (has_approach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->approach());
    }

    // optional string seed = 6;
    if (has_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seed());
    }

    // optional int32 iters = 7;
    if (has_iters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iters());
    }

    // optional int32 maxbest = 8;
    if (has_maxbest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxbest());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TryImproveRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TryImproveRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TryImproveRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TryImproveRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TryImproveRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TryImproveRequest)
    MergeFrom(*source);
  }
}

void TryImproveRequest::MergeFrom(const TryImproveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TryImproveRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_state()) {
      set_has_start_state();
      start_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_state_);
    }
    if (from.has_improveme()) {
      set_has_improveme();
      improveme_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.improveme_);
    }
    if (from.has_end_state()) {
      set_has_end_state();
      end_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_state_);
    }
    if (from.has_end_integral()) {
      set_end_integral(from.end_integral());
    }
    if (from.has_approach()) {
      set_approach(from.approach());
    }
    if (from.has_seed()) {
      set_has_seed();
      seed_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seed_);
    }
    if (from.has_iters()) {
      set_iters(from.iters());
    }
    if (from.has_maxbest()) {
      set_maxbest(from.maxbest());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TryImproveRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TryImproveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TryImproveRequest::CopyFrom(const TryImproveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TryImproveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TryImproveRequest::IsInitialized() const {

  return true;
}

void TryImproveRequest::Swap(TryImproveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TryImproveRequest::InternalSwap(TryImproveRequest* other) {
  start_state_.Swap(&other->start_state_);
  improveme_.Swap(&other->improveme_);
  end_state_.Swap(&other->end_state_);
  std::swap(end_integral_, other->end_integral_);
  std::swap(approach_, other->approach_);
  seed_.Swap(&other->seed_);
  std::swap(iters_, other->iters_);
  std::swap(maxbest_, other->maxbest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TryImproveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TryImproveRequest_descriptor_;
  metadata.reflection = TryImproveRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TryImproveRequest

// optional bytes start_state = 1;
bool TryImproveRequest::has_start_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TryImproveRequest::set_has_start_state() {
  _has_bits_[0] |= 0x00000001u;
}
void TryImproveRequest::clear_has_start_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void TryImproveRequest::clear_start_state() {
  start_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_state();
}
 const ::std::string& TryImproveRequest::start_state() const {
  // @@protoc_insertion_point(field_get:TryImproveRequest.start_state)
  return start_state_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TryImproveRequest::set_start_state(const ::std::string& value) {
  set_has_start_state();
  start_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TryImproveRequest.start_state)
}
 void TryImproveRequest::set_start_state(const char* value) {
  set_has_start_state();
  start_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TryImproveRequest.start_state)
}
 void TryImproveRequest::set_start_state(const void* value, size_t size) {
  set_has_start_state();
  start_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TryImproveRequest.start_state)
}
 ::std::string* TryImproveRequest::mutable_start_state() {
  set_has_start_state();
  // @@protoc_insertion_point(field_mutable:TryImproveRequest.start_state)
  return start_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TryImproveRequest::release_start_state() {
  // @@protoc_insertion_point(field_release:TryImproveRequest.start_state)
  clear_has_start_state();
  return start_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TryImproveRequest::set_allocated_start_state(::std::string* start_state) {
  if (start_state != NULL) {
    set_has_start_state();
  } else {
    clear_has_start_state();
  }
  start_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_state);
  // @@protoc_insertion_point(field_set_allocated:TryImproveRequest.start_state)
}

// optional bytes improveme = 2;
bool TryImproveRequest::has_improveme() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TryImproveRequest::set_has_improveme() {
  _has_bits_[0] |= 0x00000002u;
}
void TryImproveRequest::clear_has_improveme() {
  _has_bits_[0] &= ~0x00000002u;
}
void TryImproveRequest::clear_improveme() {
  improveme_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_improveme();
}
 const ::std::string& TryImproveRequest::improveme() const {
  // @@protoc_insertion_point(field_get:TryImproveRequest.improveme)
  return improveme_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TryImproveRequest::set_improveme(const ::std::string& value) {
  set_has_improveme();
  improveme_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TryImproveRequest.improveme)
}
 void TryImproveRequest::set_improveme(const char* value) {
  set_has_improveme();
  improveme_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TryImproveRequest.improveme)
}
 void TryImproveRequest::set_improveme(const void* value, size_t size) {
  set_has_improveme();
  improveme_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TryImproveRequest.improveme)
}
 ::std::string* TryImproveRequest::mutable_improveme() {
  set_has_improveme();
  // @@protoc_insertion_point(field_mutable:TryImproveRequest.improveme)
  return improveme_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TryImproveRequest::release_improveme() {
  // @@protoc_insertion_point(field_release:TryImproveRequest.improveme)
  clear_has_improveme();
  return improveme_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TryImproveRequest::set_allocated_improveme(::std::string* improveme) {
  if (improveme != NULL) {
    set_has_improveme();
  } else {
    clear_has_improveme();
  }
  improveme_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), improveme);
  // @@protoc_insertion_point(field_set_allocated:TryImproveRequest.improveme)
}

// optional bytes end_state = 3;
bool TryImproveRequest::has_end_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TryImproveRequest::set_has_end_state() {
  _has_bits_[0] |= 0x00000004u;
}
void TryImproveRequest::clear_has_end_state() {
  _has_bits_[0] &= ~0x00000004u;
}
void TryImproveRequest::clear_end_state() {
  end_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_end_state();
}
 const ::std::string& TryImproveRequest::end_state() const {
  // @@protoc_insertion_point(field_get:TryImproveRequest.end_state)
  return end_state_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TryImproveRequest::set_end_state(const ::std::string& value) {
  set_has_end_state();
  end_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TryImproveRequest.end_state)
}
 void TryImproveRequest::set_end_state(const char* value) {
  set_has_end_state();
  end_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TryImproveRequest.end_state)
}
 void TryImproveRequest::set_end_state(const void* value, size_t size) {
  set_has_end_state();
  end_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TryImproveRequest.end_state)
}
 ::std::string* TryImproveRequest::mutable_end_state() {
  set_has_end_state();
  // @@protoc_insertion_point(field_mutable:TryImproveRequest.end_state)
  return end_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TryImproveRequest::release_end_state() {
  // @@protoc_insertion_point(field_release:TryImproveRequest.end_state)
  clear_has_end_state();
  return end_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TryImproveRequest::set_allocated_end_state(::std::string* end_state) {
  if (end_state != NULL) {
    set_has_end_state();
  } else {
    clear_has_end_state();
  }
  end_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_state);
  // @@protoc_insertion_point(field_set_allocated:TryImproveRequest.end_state)
}

// optional double end_integral = 4;
bool TryImproveRequest::has_end_integral() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TryImproveRequest::set_has_end_integral() {
  _has_bits_[0] |= 0x00000008u;
}
void TryImproveRequest::clear_has_end_integral() {
  _has_bits_[0] &= ~0x00000008u;
}
void TryImproveRequest::clear_end_integral() {
  end_integral_ = 0;
  clear_has_end_integral();
}
 double TryImproveRequest::end_integral() const {
  // @@protoc_insertion_point(field_get:TryImproveRequest.end_integral)
  return end_integral_;
}
 void TryImproveRequest::set_end_integral(double value) {
  set_has_end_integral();
  end_integral_ = value;
  // @@protoc_insertion_point(field_set:TryImproveRequest.end_integral)
}

// optional .TryImproveRequest.Approach approach = 5;
bool TryImproveRequest::has_approach() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TryImproveRequest::set_has_approach() {
  _has_bits_[0] |= 0x00000010u;
}
void TryImproveRequest::clear_has_approach() {
  _has_bits_[0] &= ~0x00000010u;
}
void TryImproveRequest::clear_approach() {
  approach_ = 0;
  clear_has_approach();
}
 ::TryImproveRequest_Approach TryImproveRequest::approach() const {
  // @@protoc_insertion_point(field_get:TryImproveRequest.approach)
  return static_cast< ::TryImproveRequest_Approach >(approach_);
}
 void TryImproveRequest::set_approach(::TryImproveRequest_Approach value) {
  assert(::TryImproveRequest_Approach_IsValid(value));
  set_has_approach();
  approach_ = value;
  // @@protoc_insertion_point(field_set:TryImproveRequest.approach)
}

// optional string seed = 6;
bool TryImproveRequest::has_seed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TryImproveRequest::set_has_seed() {
  _has_bits_[0] |= 0x00000020u;
}
void TryImproveRequest::clear_has_seed() {
  _has_bits_[0] &= ~0x00000020u;
}
void TryImproveRequest::clear_seed() {
  seed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_seed();
}
 const ::std::string& TryImproveRequest::seed() const {
  // @@protoc_insertion_point(field_get:TryImproveRequest.seed)
  return seed_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TryImproveRequest::set_seed(const ::std::string& value) {
  set_has_seed();
  seed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TryImproveRequest.seed)
}
 void TryImproveRequest::set_seed(const char* value) {
  set_has_seed();
  seed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TryImproveRequest.seed)
}
 void TryImproveRequest::set_seed(const char* value, size_t size) {
  set_has_seed();
  seed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TryImproveRequest.seed)
}
 ::std::string* TryImproveRequest::mutable_seed() {
  set_has_seed();
  // @@protoc_insertion_point(field_mutable:TryImproveRequest.seed)
  return seed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TryImproveRequest::release_seed() {
  // @@protoc_insertion_point(field_release:TryImproveRequest.seed)
  clear_has_seed();
  return seed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TryImproveRequest::set_allocated_seed(::std::string* seed) {
  if (seed != NULL) {
    set_has_seed();
  } else {
    clear_has_seed();
  }
  seed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), seed);
  // @@protoc_insertion_point(field_set_allocated:TryImproveRequest.seed)
}

// optional int32 iters = 7;
bool TryImproveRequest::has_iters() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TryImproveRequest::set_has_iters() {
  _has_bits_[0] |= 0x00000040u;
}
void TryImproveRequest::clear_has_iters() {
  _has_bits_[0] &= ~0x00000040u;
}
void TryImproveRequest::clear_iters() {
  iters_ = 0;
  clear_has_iters();
}
 ::google::protobuf::int32 TryImproveRequest::iters() const {
  // @@protoc_insertion_point(field_get:TryImproveRequest.iters)
  return iters_;
}
 void TryImproveRequest::set_iters(::google::protobuf::int32 value) {
  set_has_iters();
  iters_ = value;
  // @@protoc_insertion_point(field_set:TryImproveRequest.iters)
}

// optional int32 maxbest = 8;
bool TryImproveRequest::has_maxbest() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TryImproveRequest::set_has_maxbest() {
  _has_bits_[0] |= 0x00000080u;
}
void TryImproveRequest::clear_has_maxbest() {
  _has_bits_[0] &= ~0x00000080u;
}
void TryImproveRequest::clear_maxbest() {
  maxbest_ = 0;
  clear_has_maxbest();
}
 ::google::protobuf::int32 TryImproveRequest::maxbest() const {
  // @@protoc_insertion_point(field_get:TryImproveRequest.maxbest)
  return maxbest_;
}
 void TryImproveRequest::set_maxbest(::google::protobuf::int32 value) {
  set_has_maxbest();
  maxbest_ = value;
  // @@protoc_insertion_point(field_set:TryImproveRequest.maxbest)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TryImproveResponse::kInputsFieldNumber;
const int TryImproveResponse::kScoreFieldNumber;
const int TryImproveResponse::kItersTriedFieldNumber;
const int TryImproveResponse::kItersBetterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TryImproveResponse::TryImproveResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TryImproveResponse)
}

void TryImproveResponse::InitAsDefaultInstance() {
}

TryImproveResponse::TryImproveResponse(const TryImproveResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TryImproveResponse)
}

void TryImproveResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  iters_tried_ = 0;
  iters_better_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TryImproveResponse::~TryImproveResponse() {
  // @@protoc_insertion_point(destructor:TryImproveResponse)
  SharedDtor();
}

void TryImproveResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TryImproveResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TryImproveResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TryImproveResponse_descriptor_;
}

const TryImproveResponse& TryImproveResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marionet_2eproto();
  return *default_instance_;
}

TryImproveResponse* TryImproveResponse::default_instance_ = NULL;

TryImproveResponse* TryImproveResponse::New(::google::protobuf::Arena* arena) const {
  TryImproveResponse* n = new TryImproveResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TryImproveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:TryImproveResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TryImproveResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TryImproveResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(iters_tried_, iters_better_);

#undef ZR_HELPER_
#undef ZR_

  inputs_.Clear();
  score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TryImproveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TryImproveResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes inputs = 1;
      case 1: {
        if (tag == 10) {
         parse_inputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_inputs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_inputs;
        if (input->ExpectTag(17)) goto parse_score;
        break;
      }

      // repeated double score = 2;
      case 2: {
        if (tag == 17) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_score())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_score())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_score;
        if (input->ExpectTag(24)) goto parse_iters_tried;
        break;
      }

      // optional int32 iters_tried = 3;
      case 3: {
        if (tag == 24) {
         parse_iters_tried:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iters_tried_)));
          set_has_iters_tried();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_iters_better;
        break;
      }

      // optional int32 iters_better = 4;
      case 4: {
        if (tag == 32) {
         parse_iters_better:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iters_better_)));
          set_has_iters_better();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TryImproveResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TryImproveResponse)
  return false;
#undef DO_
}

void TryImproveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TryImproveResponse)
  // repeated bytes inputs = 1;
  for (int i = 0; i < this->inputs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->inputs(i), output);
  }

  // repeated double score = 2;
  for (int i = 0; i < this->score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->score(i), output);
  }

  // optional int32 iters_tried = 3;
  if (has_iters_tried()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iters_tried(), output);
  }

  // optional int32 iters_better = 4;
  if (has_iters_better()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->iters_better(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TryImproveResponse)
}

::google::protobuf::uint8* TryImproveResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TryImproveResponse)
  // repeated bytes inputs = 1;
  for (int i = 0; i < this->inputs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->inputs(i), target);
  }

  // repeated double score = 2;
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->score(i), target);
  }

  // optional int32 iters_tried = 3;
  if (has_iters_tried()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iters_tried(), target);
  }

  // optional int32 iters_better = 4;
  if (has_iters_better()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->iters_better(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TryImproveResponse)
  return target;
}

int TryImproveResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:TryImproveResponse)
  int total_size = 0;

  if (_has_bits_[2 / 32] & 12u) {
    // optional int32 iters_tried = 3;
    if (has_iters_tried()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iters_tried());
    }

    // optional int32 iters_better = 4;
    if (has_iters_better()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iters_better());
    }

  }
  // repeated bytes inputs = 1;
  total_size += 1 * this->inputs_size();
  for (int i = 0; i < this->inputs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->inputs(i));
  }

  // repeated double score = 2;
  {
    int data_size = 0;
    data_size = 8 * this->score_size();
    total_size += 1 * this->score_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TryImproveResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TryImproveResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TryImproveResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TryImproveResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TryImproveResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TryImproveResponse)
    MergeFrom(*source);
  }
}

void TryImproveResponse::MergeFrom(const TryImproveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TryImproveResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  inputs_.MergeFrom(from.inputs_);
  score_.MergeFrom(from.score_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_iters_tried()) {
      set_iters_tried(from.iters_tried());
    }
    if (from.has_iters_better()) {
      set_iters_better(from.iters_better());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TryImproveResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TryImproveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TryImproveResponse::CopyFrom(const TryImproveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TryImproveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TryImproveResponse::IsInitialized() const {

  return true;
}

void TryImproveResponse::Swap(TryImproveResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TryImproveResponse::InternalSwap(TryImproveResponse* other) {
  inputs_.UnsafeArenaSwap(&other->inputs_);
  score_.UnsafeArenaSwap(&other->score_);
  std::swap(iters_tried_, other->iters_tried_);
  std::swap(iters_better_, other->iters_better_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TryImproveResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TryImproveResponse_descriptor_;
  metadata.reflection = TryImproveResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TryImproveResponse

// repeated bytes inputs = 1;
int TryImproveResponse::inputs_size() const {
  return inputs_.size();
}
void TryImproveResponse::clear_inputs() {
  inputs_.Clear();
}
 const ::std::string& TryImproveResponse::inputs(int index) const {
  // @@protoc_insertion_point(field_get:TryImproveResponse.inputs)
  return inputs_.Get(index);
}
 ::std::string* TryImproveResponse::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:TryImproveResponse.inputs)
  return inputs_.Mutable(index);
}
 void TryImproveResponse::set_inputs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TryImproveResponse.inputs)
  inputs_.Mutable(index)->assign(value);
}
 void TryImproveResponse::set_inputs(int index, const char* value) {
  inputs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TryImproveResponse.inputs)
}
 void TryImproveResponse::set_inputs(int index, const void* value, size_t size) {
  inputs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TryImproveResponse.inputs)
}
 ::std::string* TryImproveResponse::add_inputs() {
  // @@protoc_insertion_point(field_add_mutable:TryImproveResponse.inputs)
  return inputs_.Add();
}
 void TryImproveResponse::add_inputs(const ::std::string& value) {
  inputs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TryImproveResponse.inputs)
}
 void TryImproveResponse::add_inputs(const char* value) {
  inputs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TryImproveResponse.inputs)
}
 void TryImproveResponse::add_inputs(const void* value, size_t size) {
  inputs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TryImproveResponse.inputs)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TryImproveResponse::inputs() const {
  // @@protoc_insertion_point(field_list:TryImproveResponse.inputs)
  return inputs_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TryImproveResponse::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:TryImproveResponse.inputs)
  return &inputs_;
}

// repeated double score = 2;
int TryImproveResponse::score_size() const {
  return score_.size();
}
void TryImproveResponse::clear_score() {
  score_.Clear();
}
 double TryImproveResponse::score(int index) const {
  // @@protoc_insertion_point(field_get:TryImproveResponse.score)
  return score_.Get(index);
}
 void TryImproveResponse::set_score(int index, double value) {
  score_.Set(index, value);
  // @@protoc_insertion_point(field_set:TryImproveResponse.score)
}
 void TryImproveResponse::add_score(double value) {
  score_.Add(value);
  // @@protoc_insertion_point(field_add:TryImproveResponse.score)
}
 const ::google::protobuf::RepeatedField< double >&
TryImproveResponse::score() const {
  // @@protoc_insertion_point(field_list:TryImproveResponse.score)
  return score_;
}
 ::google::protobuf::RepeatedField< double >*
TryImproveResponse::mutable_score() {
  // @@protoc_insertion_point(field_mutable_list:TryImproveResponse.score)
  return &score_;
}

// optional int32 iters_tried = 3;
bool TryImproveResponse::has_iters_tried() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TryImproveResponse::set_has_iters_tried() {
  _has_bits_[0] |= 0x00000004u;
}
void TryImproveResponse::clear_has_iters_tried() {
  _has_bits_[0] &= ~0x00000004u;
}
void TryImproveResponse::clear_iters_tried() {
  iters_tried_ = 0;
  clear_has_iters_tried();
}
 ::google::protobuf::int32 TryImproveResponse::iters_tried() const {
  // @@protoc_insertion_point(field_get:TryImproveResponse.iters_tried)
  return iters_tried_;
}
 void TryImproveResponse::set_iters_tried(::google::protobuf::int32 value) {
  set_has_iters_tried();
  iters_tried_ = value;
  // @@protoc_insertion_point(field_set:TryImproveResponse.iters_tried)
}

// optional int32 iters_better = 4;
bool TryImproveResponse::has_iters_better() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TryImproveResponse::set_has_iters_better() {
  _has_bits_[0] |= 0x00000008u;
}
void TryImproveResponse::clear_has_iters_better() {
  _has_bits_[0] &= ~0x00000008u;
}
void TryImproveResponse::clear_iters_better() {
  iters_better_ = 0;
  clear_has_iters_better();
}
 ::google::protobuf::int32 TryImproveResponse::iters_better() const {
  // @@protoc_insertion_point(field_get:TryImproveResponse.iters_better)
  return iters_better_;
}
 void TryImproveResponse::set_iters_better(::google::protobuf::int32 value) {
  set_has_iters_better();
  iters_better_ = value;
  // @@protoc_insertion_point(field_set:TryImproveResponse.iters_better)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HelperRequest::kPlayfunFieldNumber;
const int HelperRequest::kTryimproveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HelperRequest::HelperRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HelperRequest)
}

void HelperRequest::InitAsDefaultInstance() {
  playfun_ = const_cast< ::PlayFunRequest*>(&::PlayFunRequest::default_instance());
  tryimprove_ = const_cast< ::TryImproveRequest*>(&::TryImproveRequest::default_instance());
}

HelperRequest::HelperRequest(const HelperRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HelperRequest)
}

void HelperRequest::SharedCtor() {
  _cached_size_ = 0;
  playfun_ = NULL;
  tryimprove_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HelperRequest::~HelperRequest() {
  // @@protoc_insertion_point(destructor:HelperRequest)
  SharedDtor();
}

void HelperRequest::SharedDtor() {
  if (this != default_instance_) {
    delete playfun_;
    delete tryimprove_;
  }
}

void HelperRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HelperRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HelperRequest_descriptor_;
}

const HelperRequest& HelperRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marionet_2eproto();
  return *default_instance_;
}

HelperRequest* HelperRequest::default_instance_ = NULL;

HelperRequest* HelperRequest::New(::google::protobuf::Arena* arena) const {
  HelperRequest* n = new HelperRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HelperRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:HelperRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_playfun()) {
      if (playfun_ != NULL) playfun_->::PlayFunRequest::Clear();
    }
    if (has_tryimprove()) {
      if (tryimprove_ != NULL) tryimprove_->::TryImproveRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HelperRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HelperRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PlayFunRequest playfun = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playfun()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tryimprove;
        break;
      }

      // optional .TryImproveRequest tryimprove = 2;
      case 2: {
        if (tag == 18) {
         parse_tryimprove:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tryimprove()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HelperRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HelperRequest)
  return false;
#undef DO_
}

void HelperRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HelperRequest)
  // optional .PlayFunRequest playfun = 1;
  if (has_playfun()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->playfun_, output);
  }

  // optional .TryImproveRequest tryimprove = 2;
  if (has_tryimprove()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->tryimprove_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HelperRequest)
}

::google::protobuf::uint8* HelperRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HelperRequest)
  // optional .PlayFunRequest playfun = 1;
  if (has_playfun()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->playfun_, false, target);
  }

  // optional .TryImproveRequest tryimprove = 2;
  if (has_tryimprove()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->tryimprove_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HelperRequest)
  return target;
}

int HelperRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:HelperRequest)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .PlayFunRequest playfun = 1;
    if (has_playfun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->playfun_);
    }

    // optional .TryImproveRequest tryimprove = 2;
    if (has_tryimprove()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tryimprove_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HelperRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HelperRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HelperRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HelperRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HelperRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HelperRequest)
    MergeFrom(*source);
  }
}

void HelperRequest::MergeFrom(const HelperRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HelperRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playfun()) {
      mutable_playfun()->::PlayFunRequest::MergeFrom(from.playfun());
    }
    if (from.has_tryimprove()) {
      mutable_tryimprove()->::TryImproveRequest::MergeFrom(from.tryimprove());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HelperRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HelperRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelperRequest::CopyFrom(const HelperRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HelperRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelperRequest::IsInitialized() const {

  return true;
}

void HelperRequest::Swap(HelperRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HelperRequest::InternalSwap(HelperRequest* other) {
  std::swap(playfun_, other->playfun_);
  std::swap(tryimprove_, other->tryimprove_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HelperRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HelperRequest_descriptor_;
  metadata.reflection = HelperRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HelperRequest

// optional .PlayFunRequest playfun = 1;
bool HelperRequest::has_playfun() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HelperRequest::set_has_playfun() {
  _has_bits_[0] |= 0x00000001u;
}
void HelperRequest::clear_has_playfun() {
  _has_bits_[0] &= ~0x00000001u;
}
void HelperRequest::clear_playfun() {
  if (playfun_ != NULL) playfun_->::PlayFunRequest::Clear();
  clear_has_playfun();
}
const ::PlayFunRequest& HelperRequest::playfun() const {
  // @@protoc_insertion_point(field_get:HelperRequest.playfun)
  return playfun_ != NULL ? *playfun_ : *default_instance_->playfun_;
}
::PlayFunRequest* HelperRequest::mutable_playfun() {
  set_has_playfun();
  if (playfun_ == NULL) {
    playfun_ = new ::PlayFunRequest;
  }
  // @@protoc_insertion_point(field_mutable:HelperRequest.playfun)
  return playfun_;
}
::PlayFunRequest* HelperRequest::release_playfun() {
  // @@protoc_insertion_point(field_release:HelperRequest.playfun)
  clear_has_playfun();
  ::PlayFunRequest* temp = playfun_;
  playfun_ = NULL;
  return temp;
}
void HelperRequest::set_allocated_playfun(::PlayFunRequest* playfun) {
  delete playfun_;
  playfun_ = playfun;
  if (playfun) {
    set_has_playfun();
  } else {
    clear_has_playfun();
  }
  // @@protoc_insertion_point(field_set_allocated:HelperRequest.playfun)
}

// optional .TryImproveRequest tryimprove = 2;
bool HelperRequest::has_tryimprove() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HelperRequest::set_has_tryimprove() {
  _has_bits_[0] |= 0x00000002u;
}
void HelperRequest::clear_has_tryimprove() {
  _has_bits_[0] &= ~0x00000002u;
}
void HelperRequest::clear_tryimprove() {
  if (tryimprove_ != NULL) tryimprove_->::TryImproveRequest::Clear();
  clear_has_tryimprove();
}
const ::TryImproveRequest& HelperRequest::tryimprove() const {
  // @@protoc_insertion_point(field_get:HelperRequest.tryimprove)
  return tryimprove_ != NULL ? *tryimprove_ : *default_instance_->tryimprove_;
}
::TryImproveRequest* HelperRequest::mutable_tryimprove() {
  set_has_tryimprove();
  if (tryimprove_ == NULL) {
    tryimprove_ = new ::TryImproveRequest;
  }
  // @@protoc_insertion_point(field_mutable:HelperRequest.tryimprove)
  return tryimprove_;
}
::TryImproveRequest* HelperRequest::release_tryimprove() {
  // @@protoc_insertion_point(field_release:HelperRequest.tryimprove)
  clear_has_tryimprove();
  ::TryImproveRequest* temp = tryimprove_;
  tryimprove_ = NULL;
  return temp;
}
void HelperRequest::set_allocated_tryimprove(::TryImproveRequest* tryimprove) {
  delete tryimprove_;
  tryimprove_ = tryimprove;
  if (tryimprove) {
    set_has_tryimprove();
  } else {
    clear_has_tryimprove();
  }
  // @@protoc_insertion_point(field_set_allocated:HelperRequest.tryimprove)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
