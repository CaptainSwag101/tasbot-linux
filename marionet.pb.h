// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: marionet.proto

#ifndef PROTOBUF_marionet_2eproto__INCLUDED
#define PROTOBUF_marionet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class FutureProto;
class FutureProtoDefaultTypeInternal;
extern FutureProtoDefaultTypeInternal _FutureProto_default_instance_;
class HelperRequest;
class HelperRequestDefaultTypeInternal;
extern HelperRequestDefaultTypeInternal _HelperRequest_default_instance_;
class MarkovInput;
class MarkovInputDefaultTypeInternal;
extern MarkovInputDefaultTypeInternal _MarkovInput_default_instance_;
class PlayFunRequest;
class PlayFunRequestDefaultTypeInternal;
extern PlayFunRequestDefaultTypeInternal _PlayFunRequest_default_instance_;
class PlayFunResponse;
class PlayFunResponseDefaultTypeInternal;
extern PlayFunResponseDefaultTypeInternal _PlayFunResponse_default_instance_;
class TryImproveRequest;
class TryImproveRequestDefaultTypeInternal;
extern TryImproveRequestDefaultTypeInternal _TryImproveRequest_default_instance_;
class TryImproveResponse;
class TryImproveResponseDefaultTypeInternal;
extern TryImproveResponseDefaultTypeInternal _TryImproveResponse_default_instance_;

namespace protobuf_marionet_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_marionet_2eproto

enum TryImproveRequest_Approach {
  TryImproveRequest_Approach_RANDOM = 0,
  TryImproveRequest_Approach_OPPOSITES = 1,
  TryImproveRequest_Approach_ABLATION = 2,
  TryImproveRequest_Approach_CHOP = 3
};
bool TryImproveRequest_Approach_IsValid(int value);
const TryImproveRequest_Approach TryImproveRequest_Approach_Approach_MIN = TryImproveRequest_Approach_RANDOM;
const TryImproveRequest_Approach TryImproveRequest_Approach_Approach_MAX = TryImproveRequest_Approach_CHOP;
const int TryImproveRequest_Approach_Approach_ARRAYSIZE = TryImproveRequest_Approach_Approach_MAX + 1;

const ::google::protobuf::EnumDescriptor* TryImproveRequest_Approach_descriptor();
inline const ::std::string& TryImproveRequest_Approach_Name(TryImproveRequest_Approach value) {
  return ::google::protobuf::internal::NameOfEnum(
    TryImproveRequest_Approach_descriptor(), value);
}
inline bool TryImproveRequest_Approach_Parse(
    const ::std::string& name, TryImproveRequest_Approach* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TryImproveRequest_Approach>(
    TryImproveRequest_Approach_descriptor(), name, value);
}
// ===================================================================

class MarkovInput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MarkovInput) */ {
 public:
  MarkovInput();
  virtual ~MarkovInput();

  MarkovInput(const MarkovInput& from);

  inline MarkovInput& operator=(const MarkovInput& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarkovInput& default_instance();

  static inline const MarkovInput* internal_default_instance() {
    return reinterpret_cast<const MarkovInput*>(
               &_MarkovInput_default_instance_);
  }

  void Swap(MarkovInput* other);

  // implements Message ----------------------------------------------

  inline MarkovInput* New() const PROTOBUF_FINAL { return New(NULL); }

  MarkovInput* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MarkovInput& from);
  void MergeFrom(const MarkovInput& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MarkovInput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:MarkovInput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct  protobuf_marionet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FutureProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FutureProto) */ {
 public:
  FutureProto();
  virtual ~FutureProto();

  FutureProto(const FutureProto& from);

  inline FutureProto& operator=(const FutureProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureProto& default_instance();

  static inline const FutureProto* internal_default_instance() {
    return reinterpret_cast<const FutureProto*>(
               &_FutureProto_default_instance_);
  }

  void Swap(FutureProto* other);

  // implements Message ----------------------------------------------

  inline FutureProto* New() const PROTOBUF_FINAL { return New(NULL); }

  FutureProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FutureProto& from);
  void MergeFrom(const FutureProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FutureProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes inputs = 4;
  bool has_inputs() const;
  void clear_inputs();
  static const int kInputsFieldNumber = 4;
  const ::std::string& inputs() const;
  void set_inputs(const ::std::string& value);
  #if LANG_CXX11
  void set_inputs(::std::string&& value);
  #endif
  void set_inputs(const char* value);
  void set_inputs(const void* value, size_t size);
  ::std::string* mutable_inputs();
  ::std::string* release_inputs();
  void set_allocated_inputs(::std::string* inputs);

  // @@protoc_insertion_point(class_scope:FutureProto)
 private:
  void set_has_inputs();
  void clear_has_inputs();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr inputs_;
  friend struct  protobuf_marionet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayFunRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PlayFunRequest) */ {
 public:
  PlayFunRequest();
  virtual ~PlayFunRequest();

  PlayFunRequest(const PlayFunRequest& from);

  inline PlayFunRequest& operator=(const PlayFunRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayFunRequest& default_instance();

  static inline const PlayFunRequest* internal_default_instance() {
    return reinterpret_cast<const PlayFunRequest*>(
               &_PlayFunRequest_default_instance_);
  }

  void Swap(PlayFunRequest* other);

  // implements Message ----------------------------------------------

  inline PlayFunRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayFunRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayFunRequest& from);
  void MergeFrom(const PlayFunRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayFunRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FutureProto futures = 3;
  int futures_size() const;
  void clear_futures();
  static const int kFuturesFieldNumber = 3;
  const ::FutureProto& futures(int index) const;
  ::FutureProto* mutable_futures(int index);
  ::FutureProto* add_futures();
  ::google::protobuf::RepeatedPtrField< ::FutureProto >*
      mutable_futures();
  const ::google::protobuf::RepeatedPtrField< ::FutureProto >&
      futures() const;

  // optional bytes current_state = 1;
  bool has_current_state() const;
  void clear_current_state();
  static const int kCurrentStateFieldNumber = 1;
  const ::std::string& current_state() const;
  void set_current_state(const ::std::string& value);
  #if LANG_CXX11
  void set_current_state(::std::string&& value);
  #endif
  void set_current_state(const char* value);
  void set_current_state(const void* value, size_t size);
  ::std::string* mutable_current_state();
  ::std::string* release_current_state();
  void set_allocated_current_state(::std::string* current_state);

  // optional bytes next = 2;
  bool has_next() const;
  void clear_next();
  static const int kNextFieldNumber = 2;
  const ::std::string& next() const;
  void set_next(const ::std::string& value);
  #if LANG_CXX11
  void set_next(::std::string&& value);
  #endif
  void set_next(const char* value);
  void set_next(const void* value, size_t size);
  ::std::string* mutable_next();
  ::std::string* release_next();
  void set_allocated_next(::std::string* next);

  // @@protoc_insertion_point(class_scope:PlayFunRequest)
 private:
  void set_has_current_state();
  void clear_has_current_state();
  void set_has_next();
  void clear_has_next();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::FutureProto > futures_;
  ::google::protobuf::internal::ArenaStringPtr current_state_;
  ::google::protobuf::internal::ArenaStringPtr next_;
  friend struct  protobuf_marionet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayFunResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PlayFunResponse) */ {
 public:
  PlayFunResponse();
  virtual ~PlayFunResponse();

  PlayFunResponse(const PlayFunResponse& from);

  inline PlayFunResponse& operator=(const PlayFunResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayFunResponse& default_instance();

  static inline const PlayFunResponse* internal_default_instance() {
    return reinterpret_cast<const PlayFunResponse*>(
               &_PlayFunResponse_default_instance_);
  }

  void Swap(PlayFunResponse* other);

  // implements Message ----------------------------------------------

  inline PlayFunResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayFunResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayFunResponse& from);
  void MergeFrom(const PlayFunResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayFunResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double futurescores = 5;
  int futurescores_size() const;
  void clear_futurescores();
  static const int kFuturescoresFieldNumber = 5;
  double futurescores(int index) const;
  void set_futurescores(int index, double value);
  void add_futurescores(double value);
  const ::google::protobuf::RepeatedField< double >&
      futurescores() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_futurescores();

  // optional double immediate_score = 1;
  bool has_immediate_score() const;
  void clear_immediate_score();
  static const int kImmediateScoreFieldNumber = 1;
  double immediate_score() const;
  void set_immediate_score(double value);

  // optional double best_future_score = 2;
  bool has_best_future_score() const;
  void clear_best_future_score();
  static const int kBestFutureScoreFieldNumber = 2;
  double best_future_score() const;
  void set_best_future_score(double value);

  // optional double worst_future_score = 3;
  bool has_worst_future_score() const;
  void clear_worst_future_score();
  static const int kWorstFutureScoreFieldNumber = 3;
  double worst_future_score() const;
  void set_worst_future_score(double value);

  // optional double futures_score = 4;
  bool has_futures_score() const;
  void clear_futures_score();
  static const int kFuturesScoreFieldNumber = 4;
  double futures_score() const;
  void set_futures_score(double value);

  // @@protoc_insertion_point(class_scope:PlayFunResponse)
 private:
  void set_has_immediate_score();
  void clear_has_immediate_score();
  void set_has_best_future_score();
  void clear_has_best_future_score();
  void set_has_worst_future_score();
  void clear_has_worst_future_score();
  void set_has_futures_score();
  void clear_has_futures_score();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > futurescores_;
  double immediate_score_;
  double best_future_score_;
  double worst_future_score_;
  double futures_score_;
  friend struct  protobuf_marionet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TryImproveRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TryImproveRequest) */ {
 public:
  TryImproveRequest();
  virtual ~TryImproveRequest();

  TryImproveRequest(const TryImproveRequest& from);

  inline TryImproveRequest& operator=(const TryImproveRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TryImproveRequest& default_instance();

  static inline const TryImproveRequest* internal_default_instance() {
    return reinterpret_cast<const TryImproveRequest*>(
               &_TryImproveRequest_default_instance_);
  }

  void Swap(TryImproveRequest* other);

  // implements Message ----------------------------------------------

  inline TryImproveRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  TryImproveRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TryImproveRequest& from);
  void MergeFrom(const TryImproveRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TryImproveRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TryImproveRequest_Approach Approach;
  static const Approach RANDOM =
    TryImproveRequest_Approach_RANDOM;
  static const Approach OPPOSITES =
    TryImproveRequest_Approach_OPPOSITES;
  static const Approach ABLATION =
    TryImproveRequest_Approach_ABLATION;
  static const Approach CHOP =
    TryImproveRequest_Approach_CHOP;
  static inline bool Approach_IsValid(int value) {
    return TryImproveRequest_Approach_IsValid(value);
  }
  static const Approach Approach_MIN =
    TryImproveRequest_Approach_Approach_MIN;
  static const Approach Approach_MAX =
    TryImproveRequest_Approach_Approach_MAX;
  static const int Approach_ARRAYSIZE =
    TryImproveRequest_Approach_Approach_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Approach_descriptor() {
    return TryImproveRequest_Approach_descriptor();
  }
  static inline const ::std::string& Approach_Name(Approach value) {
    return TryImproveRequest_Approach_Name(value);
  }
  static inline bool Approach_Parse(const ::std::string& name,
      Approach* value) {
    return TryImproveRequest_Approach_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bytes start_state = 1;
  bool has_start_state() const;
  void clear_start_state();
  static const int kStartStateFieldNumber = 1;
  const ::std::string& start_state() const;
  void set_start_state(const ::std::string& value);
  #if LANG_CXX11
  void set_start_state(::std::string&& value);
  #endif
  void set_start_state(const char* value);
  void set_start_state(const void* value, size_t size);
  ::std::string* mutable_start_state();
  ::std::string* release_start_state();
  void set_allocated_start_state(::std::string* start_state);

  // optional bytes improveme = 2;
  bool has_improveme() const;
  void clear_improveme();
  static const int kImprovemeFieldNumber = 2;
  const ::std::string& improveme() const;
  void set_improveme(const ::std::string& value);
  #if LANG_CXX11
  void set_improveme(::std::string&& value);
  #endif
  void set_improveme(const char* value);
  void set_improveme(const void* value, size_t size);
  ::std::string* mutable_improveme();
  ::std::string* release_improveme();
  void set_allocated_improveme(::std::string* improveme);

  // optional bytes end_state = 3;
  bool has_end_state() const;
  void clear_end_state();
  static const int kEndStateFieldNumber = 3;
  const ::std::string& end_state() const;
  void set_end_state(const ::std::string& value);
  #if LANG_CXX11
  void set_end_state(::std::string&& value);
  #endif
  void set_end_state(const char* value);
  void set_end_state(const void* value, size_t size);
  ::std::string* mutable_end_state();
  ::std::string* release_end_state();
  void set_allocated_end_state(::std::string* end_state);

  // optional string seed = 6;
  bool has_seed() const;
  void clear_seed();
  static const int kSeedFieldNumber = 6;
  const ::std::string& seed() const;
  void set_seed(const ::std::string& value);
  #if LANG_CXX11
  void set_seed(::std::string&& value);
  #endif
  void set_seed(const char* value);
  void set_seed(const char* value, size_t size);
  ::std::string* mutable_seed();
  ::std::string* release_seed();
  void set_allocated_seed(::std::string* seed);

  // optional double end_integral = 4;
  bool has_end_integral() const;
  void clear_end_integral();
  static const int kEndIntegralFieldNumber = 4;
  double end_integral() const;
  void set_end_integral(double value);

  // optional .TryImproveRequest.Approach approach = 5;
  bool has_approach() const;
  void clear_approach();
  static const int kApproachFieldNumber = 5;
  ::TryImproveRequest_Approach approach() const;
  void set_approach(::TryImproveRequest_Approach value);

  // optional int32 iters = 7;
  bool has_iters() const;
  void clear_iters();
  static const int kItersFieldNumber = 7;
  ::google::protobuf::int32 iters() const;
  void set_iters(::google::protobuf::int32 value);

  // optional int32 maxbest = 8;
  bool has_maxbest() const;
  void clear_maxbest();
  static const int kMaxbestFieldNumber = 8;
  ::google::protobuf::int32 maxbest() const;
  void set_maxbest(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TryImproveRequest)
 private:
  void set_has_start_state();
  void clear_has_start_state();
  void set_has_improveme();
  void clear_has_improveme();
  void set_has_end_state();
  void clear_has_end_state();
  void set_has_end_integral();
  void clear_has_end_integral();
  void set_has_approach();
  void clear_has_approach();
  void set_has_seed();
  void clear_has_seed();
  void set_has_iters();
  void clear_has_iters();
  void set_has_maxbest();
  void clear_has_maxbest();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr start_state_;
  ::google::protobuf::internal::ArenaStringPtr improveme_;
  ::google::protobuf::internal::ArenaStringPtr end_state_;
  ::google::protobuf::internal::ArenaStringPtr seed_;
  double end_integral_;
  int approach_;
  ::google::protobuf::int32 iters_;
  ::google::protobuf::int32 maxbest_;
  friend struct  protobuf_marionet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TryImproveResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TryImproveResponse) */ {
 public:
  TryImproveResponse();
  virtual ~TryImproveResponse();

  TryImproveResponse(const TryImproveResponse& from);

  inline TryImproveResponse& operator=(const TryImproveResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TryImproveResponse& default_instance();

  static inline const TryImproveResponse* internal_default_instance() {
    return reinterpret_cast<const TryImproveResponse*>(
               &_TryImproveResponse_default_instance_);
  }

  void Swap(TryImproveResponse* other);

  // implements Message ----------------------------------------------

  inline TryImproveResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  TryImproveResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TryImproveResponse& from);
  void MergeFrom(const TryImproveResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TryImproveResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes inputs = 1;
  int inputs_size() const;
  void clear_inputs();
  static const int kInputsFieldNumber = 1;
  const ::std::string& inputs(int index) const;
  ::std::string* mutable_inputs(int index);
  void set_inputs(int index, const ::std::string& value);
  void set_inputs(int index, const char* value);
  void set_inputs(int index, const void* value, size_t size);
  ::std::string* add_inputs();
  void add_inputs(const ::std::string& value);
  void add_inputs(const char* value);
  void add_inputs(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& inputs() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_inputs();

  // repeated double score = 2;
  int score_size() const;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  double score(int index) const;
  void set_score(int index, double value);
  void add_score(double value);
  const ::google::protobuf::RepeatedField< double >&
      score() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_score();

  // optional int32 iters_tried = 3;
  bool has_iters_tried() const;
  void clear_iters_tried();
  static const int kItersTriedFieldNumber = 3;
  ::google::protobuf::int32 iters_tried() const;
  void set_iters_tried(::google::protobuf::int32 value);

  // optional int32 iters_better = 4;
  bool has_iters_better() const;
  void clear_iters_better();
  static const int kItersBetterFieldNumber = 4;
  ::google::protobuf::int32 iters_better() const;
  void set_iters_better(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TryImproveResponse)
 private:
  void set_has_iters_tried();
  void clear_has_iters_tried();
  void set_has_iters_better();
  void clear_has_iters_better();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> inputs_;
  ::google::protobuf::RepeatedField< double > score_;
  ::google::protobuf::int32 iters_tried_;
  ::google::protobuf::int32 iters_better_;
  friend struct  protobuf_marionet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HelperRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HelperRequest) */ {
 public:
  HelperRequest();
  virtual ~HelperRequest();

  HelperRequest(const HelperRequest& from);

  inline HelperRequest& operator=(const HelperRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HelperRequest& default_instance();

  static inline const HelperRequest* internal_default_instance() {
    return reinterpret_cast<const HelperRequest*>(
               &_HelperRequest_default_instance_);
  }

  void Swap(HelperRequest* other);

  // implements Message ----------------------------------------------

  inline HelperRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  HelperRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HelperRequest& from);
  void MergeFrom(const HelperRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HelperRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PlayFunRequest playfun = 1;
  bool has_playfun() const;
  void clear_playfun();
  static const int kPlayfunFieldNumber = 1;
  const ::PlayFunRequest& playfun() const;
  ::PlayFunRequest* mutable_playfun();
  ::PlayFunRequest* release_playfun();
  void set_allocated_playfun(::PlayFunRequest* playfun);

  // optional .TryImproveRequest tryimprove = 2;
  bool has_tryimprove() const;
  void clear_tryimprove();
  static const int kTryimproveFieldNumber = 2;
  const ::TryImproveRequest& tryimprove() const;
  ::TryImproveRequest* mutable_tryimprove();
  ::TryImproveRequest* release_tryimprove();
  void set_allocated_tryimprove(::TryImproveRequest* tryimprove);

  // @@protoc_insertion_point(class_scope:HelperRequest)
 private:
  void set_has_playfun();
  void clear_has_playfun();
  void set_has_tryimprove();
  void clear_has_tryimprove();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::PlayFunRequest* playfun_;
  ::TryImproveRequest* tryimprove_;
  friend struct  protobuf_marionet_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MarkovInput

// -------------------------------------------------------------------

// FutureProto

// optional bytes inputs = 4;
inline bool FutureProto::has_inputs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureProto::set_has_inputs() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureProto::clear_has_inputs() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureProto::clear_inputs() {
  inputs_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_inputs();
}
inline const ::std::string& FutureProto::inputs() const {
  // @@protoc_insertion_point(field_get:FutureProto.inputs)
  return inputs_.GetNoArena();
}
inline void FutureProto::set_inputs(const ::std::string& value) {
  set_has_inputs();
  inputs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FutureProto.inputs)
}
#if LANG_CXX11
inline void FutureProto::set_inputs(::std::string&& value) {
  set_has_inputs();
  inputs_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FutureProto.inputs)
}
#endif
inline void FutureProto::set_inputs(const char* value) {
  set_has_inputs();
  inputs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FutureProto.inputs)
}
inline void FutureProto::set_inputs(const void* value, size_t size) {
  set_has_inputs();
  inputs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FutureProto.inputs)
}
inline ::std::string* FutureProto::mutable_inputs() {
  set_has_inputs();
  // @@protoc_insertion_point(field_mutable:FutureProto.inputs)
  return inputs_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureProto::release_inputs() {
  // @@protoc_insertion_point(field_release:FutureProto.inputs)
  clear_has_inputs();
  return inputs_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureProto::set_allocated_inputs(::std::string* inputs) {
  if (inputs != NULL) {
    set_has_inputs();
  } else {
    clear_has_inputs();
  }
  inputs_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inputs);
  // @@protoc_insertion_point(field_set_allocated:FutureProto.inputs)
}

// -------------------------------------------------------------------

// PlayFunRequest

// optional bytes current_state = 1;
inline bool PlayFunRequest::has_current_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayFunRequest::set_has_current_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayFunRequest::clear_has_current_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayFunRequest::clear_current_state() {
  current_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_current_state();
}
inline const ::std::string& PlayFunRequest::current_state() const {
  // @@protoc_insertion_point(field_get:PlayFunRequest.current_state)
  return current_state_.GetNoArena();
}
inline void PlayFunRequest::set_current_state(const ::std::string& value) {
  set_has_current_state();
  current_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayFunRequest.current_state)
}
#if LANG_CXX11
inline void PlayFunRequest::set_current_state(::std::string&& value) {
  set_has_current_state();
  current_state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayFunRequest.current_state)
}
#endif
inline void PlayFunRequest::set_current_state(const char* value) {
  set_has_current_state();
  current_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayFunRequest.current_state)
}
inline void PlayFunRequest::set_current_state(const void* value, size_t size) {
  set_has_current_state();
  current_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayFunRequest.current_state)
}
inline ::std::string* PlayFunRequest::mutable_current_state() {
  set_has_current_state();
  // @@protoc_insertion_point(field_mutable:PlayFunRequest.current_state)
  return current_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayFunRequest::release_current_state() {
  // @@protoc_insertion_point(field_release:PlayFunRequest.current_state)
  clear_has_current_state();
  return current_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayFunRequest::set_allocated_current_state(::std::string* current_state) {
  if (current_state != NULL) {
    set_has_current_state();
  } else {
    clear_has_current_state();
  }
  current_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), current_state);
  // @@protoc_insertion_point(field_set_allocated:PlayFunRequest.current_state)
}

// optional bytes next = 2;
inline bool PlayFunRequest::has_next() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayFunRequest::set_has_next() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayFunRequest::clear_has_next() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayFunRequest::clear_next() {
  next_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_next();
}
inline const ::std::string& PlayFunRequest::next() const {
  // @@protoc_insertion_point(field_get:PlayFunRequest.next)
  return next_.GetNoArena();
}
inline void PlayFunRequest::set_next(const ::std::string& value) {
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayFunRequest.next)
}
#if LANG_CXX11
inline void PlayFunRequest::set_next(::std::string&& value) {
  set_has_next();
  next_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayFunRequest.next)
}
#endif
inline void PlayFunRequest::set_next(const char* value) {
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayFunRequest.next)
}
inline void PlayFunRequest::set_next(const void* value, size_t size) {
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayFunRequest.next)
}
inline ::std::string* PlayFunRequest::mutable_next() {
  set_has_next();
  // @@protoc_insertion_point(field_mutable:PlayFunRequest.next)
  return next_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayFunRequest::release_next() {
  // @@protoc_insertion_point(field_release:PlayFunRequest.next)
  clear_has_next();
  return next_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayFunRequest::set_allocated_next(::std::string* next) {
  if (next != NULL) {
    set_has_next();
  } else {
    clear_has_next();
  }
  next_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next);
  // @@protoc_insertion_point(field_set_allocated:PlayFunRequest.next)
}

// repeated .FutureProto futures = 3;
inline int PlayFunRequest::futures_size() const {
  return futures_.size();
}
inline void PlayFunRequest::clear_futures() {
  futures_.Clear();
}
inline const ::FutureProto& PlayFunRequest::futures(int index) const {
  // @@protoc_insertion_point(field_get:PlayFunRequest.futures)
  return futures_.Get(index);
}
inline ::FutureProto* PlayFunRequest::mutable_futures(int index) {
  // @@protoc_insertion_point(field_mutable:PlayFunRequest.futures)
  return futures_.Mutable(index);
}
inline ::FutureProto* PlayFunRequest::add_futures() {
  // @@protoc_insertion_point(field_add:PlayFunRequest.futures)
  return futures_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::FutureProto >*
PlayFunRequest::mutable_futures() {
  // @@protoc_insertion_point(field_mutable_list:PlayFunRequest.futures)
  return &futures_;
}
inline const ::google::protobuf::RepeatedPtrField< ::FutureProto >&
PlayFunRequest::futures() const {
  // @@protoc_insertion_point(field_list:PlayFunRequest.futures)
  return futures_;
}

// -------------------------------------------------------------------

// PlayFunResponse

// optional double immediate_score = 1;
inline bool PlayFunResponse::has_immediate_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayFunResponse::set_has_immediate_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayFunResponse::clear_has_immediate_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayFunResponse::clear_immediate_score() {
  immediate_score_ = 0;
  clear_has_immediate_score();
}
inline double PlayFunResponse::immediate_score() const {
  // @@protoc_insertion_point(field_get:PlayFunResponse.immediate_score)
  return immediate_score_;
}
inline void PlayFunResponse::set_immediate_score(double value) {
  set_has_immediate_score();
  immediate_score_ = value;
  // @@protoc_insertion_point(field_set:PlayFunResponse.immediate_score)
}

// optional double best_future_score = 2;
inline bool PlayFunResponse::has_best_future_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayFunResponse::set_has_best_future_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayFunResponse::clear_has_best_future_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayFunResponse::clear_best_future_score() {
  best_future_score_ = 0;
  clear_has_best_future_score();
}
inline double PlayFunResponse::best_future_score() const {
  // @@protoc_insertion_point(field_get:PlayFunResponse.best_future_score)
  return best_future_score_;
}
inline void PlayFunResponse::set_best_future_score(double value) {
  set_has_best_future_score();
  best_future_score_ = value;
  // @@protoc_insertion_point(field_set:PlayFunResponse.best_future_score)
}

// optional double worst_future_score = 3;
inline bool PlayFunResponse::has_worst_future_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayFunResponse::set_has_worst_future_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayFunResponse::clear_has_worst_future_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayFunResponse::clear_worst_future_score() {
  worst_future_score_ = 0;
  clear_has_worst_future_score();
}
inline double PlayFunResponse::worst_future_score() const {
  // @@protoc_insertion_point(field_get:PlayFunResponse.worst_future_score)
  return worst_future_score_;
}
inline void PlayFunResponse::set_worst_future_score(double value) {
  set_has_worst_future_score();
  worst_future_score_ = value;
  // @@protoc_insertion_point(field_set:PlayFunResponse.worst_future_score)
}

// optional double futures_score = 4;
inline bool PlayFunResponse::has_futures_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayFunResponse::set_has_futures_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayFunResponse::clear_has_futures_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayFunResponse::clear_futures_score() {
  futures_score_ = 0;
  clear_has_futures_score();
}
inline double PlayFunResponse::futures_score() const {
  // @@protoc_insertion_point(field_get:PlayFunResponse.futures_score)
  return futures_score_;
}
inline void PlayFunResponse::set_futures_score(double value) {
  set_has_futures_score();
  futures_score_ = value;
  // @@protoc_insertion_point(field_set:PlayFunResponse.futures_score)
}

// repeated double futurescores = 5;
inline int PlayFunResponse::futurescores_size() const {
  return futurescores_.size();
}
inline void PlayFunResponse::clear_futurescores() {
  futurescores_.Clear();
}
inline double PlayFunResponse::futurescores(int index) const {
  // @@protoc_insertion_point(field_get:PlayFunResponse.futurescores)
  return futurescores_.Get(index);
}
inline void PlayFunResponse::set_futurescores(int index, double value) {
  futurescores_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlayFunResponse.futurescores)
}
inline void PlayFunResponse::add_futurescores(double value) {
  futurescores_.Add(value);
  // @@protoc_insertion_point(field_add:PlayFunResponse.futurescores)
}
inline const ::google::protobuf::RepeatedField< double >&
PlayFunResponse::futurescores() const {
  // @@protoc_insertion_point(field_list:PlayFunResponse.futurescores)
  return futurescores_;
}
inline ::google::protobuf::RepeatedField< double >*
PlayFunResponse::mutable_futurescores() {
  // @@protoc_insertion_point(field_mutable_list:PlayFunResponse.futurescores)
  return &futurescores_;
}

// -------------------------------------------------------------------

// TryImproveRequest

// optional bytes start_state = 1;
inline bool TryImproveRequest::has_start_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TryImproveRequest::set_has_start_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TryImproveRequest::clear_has_start_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TryImproveRequest::clear_start_state() {
  start_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_state();
}
inline const ::std::string& TryImproveRequest::start_state() const {
  // @@protoc_insertion_point(field_get:TryImproveRequest.start_state)
  return start_state_.GetNoArena();
}
inline void TryImproveRequest::set_start_state(const ::std::string& value) {
  set_has_start_state();
  start_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TryImproveRequest.start_state)
}
#if LANG_CXX11
inline void TryImproveRequest::set_start_state(::std::string&& value) {
  set_has_start_state();
  start_state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TryImproveRequest.start_state)
}
#endif
inline void TryImproveRequest::set_start_state(const char* value) {
  set_has_start_state();
  start_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TryImproveRequest.start_state)
}
inline void TryImproveRequest::set_start_state(const void* value, size_t size) {
  set_has_start_state();
  start_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TryImproveRequest.start_state)
}
inline ::std::string* TryImproveRequest::mutable_start_state() {
  set_has_start_state();
  // @@protoc_insertion_point(field_mutable:TryImproveRequest.start_state)
  return start_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TryImproveRequest::release_start_state() {
  // @@protoc_insertion_point(field_release:TryImproveRequest.start_state)
  clear_has_start_state();
  return start_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TryImproveRequest::set_allocated_start_state(::std::string* start_state) {
  if (start_state != NULL) {
    set_has_start_state();
  } else {
    clear_has_start_state();
  }
  start_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_state);
  // @@protoc_insertion_point(field_set_allocated:TryImproveRequest.start_state)
}

// optional bytes improveme = 2;
inline bool TryImproveRequest::has_improveme() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TryImproveRequest::set_has_improveme() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TryImproveRequest::clear_has_improveme() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TryImproveRequest::clear_improveme() {
  improveme_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_improveme();
}
inline const ::std::string& TryImproveRequest::improveme() const {
  // @@protoc_insertion_point(field_get:TryImproveRequest.improveme)
  return improveme_.GetNoArena();
}
inline void TryImproveRequest::set_improveme(const ::std::string& value) {
  set_has_improveme();
  improveme_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TryImproveRequest.improveme)
}
#if LANG_CXX11
inline void TryImproveRequest::set_improveme(::std::string&& value) {
  set_has_improveme();
  improveme_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TryImproveRequest.improveme)
}
#endif
inline void TryImproveRequest::set_improveme(const char* value) {
  set_has_improveme();
  improveme_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TryImproveRequest.improveme)
}
inline void TryImproveRequest::set_improveme(const void* value, size_t size) {
  set_has_improveme();
  improveme_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TryImproveRequest.improveme)
}
inline ::std::string* TryImproveRequest::mutable_improveme() {
  set_has_improveme();
  // @@protoc_insertion_point(field_mutable:TryImproveRequest.improveme)
  return improveme_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TryImproveRequest::release_improveme() {
  // @@protoc_insertion_point(field_release:TryImproveRequest.improveme)
  clear_has_improveme();
  return improveme_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TryImproveRequest::set_allocated_improveme(::std::string* improveme) {
  if (improveme != NULL) {
    set_has_improveme();
  } else {
    clear_has_improveme();
  }
  improveme_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), improveme);
  // @@protoc_insertion_point(field_set_allocated:TryImproveRequest.improveme)
}

// optional bytes end_state = 3;
inline bool TryImproveRequest::has_end_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TryImproveRequest::set_has_end_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TryImproveRequest::clear_has_end_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TryImproveRequest::clear_end_state() {
  end_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_end_state();
}
inline const ::std::string& TryImproveRequest::end_state() const {
  // @@protoc_insertion_point(field_get:TryImproveRequest.end_state)
  return end_state_.GetNoArena();
}
inline void TryImproveRequest::set_end_state(const ::std::string& value) {
  set_has_end_state();
  end_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TryImproveRequest.end_state)
}
#if LANG_CXX11
inline void TryImproveRequest::set_end_state(::std::string&& value) {
  set_has_end_state();
  end_state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TryImproveRequest.end_state)
}
#endif
inline void TryImproveRequest::set_end_state(const char* value) {
  set_has_end_state();
  end_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TryImproveRequest.end_state)
}
inline void TryImproveRequest::set_end_state(const void* value, size_t size) {
  set_has_end_state();
  end_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TryImproveRequest.end_state)
}
inline ::std::string* TryImproveRequest::mutable_end_state() {
  set_has_end_state();
  // @@protoc_insertion_point(field_mutable:TryImproveRequest.end_state)
  return end_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TryImproveRequest::release_end_state() {
  // @@protoc_insertion_point(field_release:TryImproveRequest.end_state)
  clear_has_end_state();
  return end_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TryImproveRequest::set_allocated_end_state(::std::string* end_state) {
  if (end_state != NULL) {
    set_has_end_state();
  } else {
    clear_has_end_state();
  }
  end_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_state);
  // @@protoc_insertion_point(field_set_allocated:TryImproveRequest.end_state)
}

// optional double end_integral = 4;
inline bool TryImproveRequest::has_end_integral() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TryImproveRequest::set_has_end_integral() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TryImproveRequest::clear_has_end_integral() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TryImproveRequest::clear_end_integral() {
  end_integral_ = 0;
  clear_has_end_integral();
}
inline double TryImproveRequest::end_integral() const {
  // @@protoc_insertion_point(field_get:TryImproveRequest.end_integral)
  return end_integral_;
}
inline void TryImproveRequest::set_end_integral(double value) {
  set_has_end_integral();
  end_integral_ = value;
  // @@protoc_insertion_point(field_set:TryImproveRequest.end_integral)
}

// optional .TryImproveRequest.Approach approach = 5;
inline bool TryImproveRequest::has_approach() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TryImproveRequest::set_has_approach() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TryImproveRequest::clear_has_approach() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TryImproveRequest::clear_approach() {
  approach_ = 0;
  clear_has_approach();
}
inline ::TryImproveRequest_Approach TryImproveRequest::approach() const {
  // @@protoc_insertion_point(field_get:TryImproveRequest.approach)
  return static_cast< ::TryImproveRequest_Approach >(approach_);
}
inline void TryImproveRequest::set_approach(::TryImproveRequest_Approach value) {
  assert(::TryImproveRequest_Approach_IsValid(value));
  set_has_approach();
  approach_ = value;
  // @@protoc_insertion_point(field_set:TryImproveRequest.approach)
}

// optional string seed = 6;
inline bool TryImproveRequest::has_seed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TryImproveRequest::set_has_seed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TryImproveRequest::clear_has_seed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TryImproveRequest::clear_seed() {
  seed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_seed();
}
inline const ::std::string& TryImproveRequest::seed() const {
  // @@protoc_insertion_point(field_get:TryImproveRequest.seed)
  return seed_.GetNoArena();
}
inline void TryImproveRequest::set_seed(const ::std::string& value) {
  set_has_seed();
  seed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TryImproveRequest.seed)
}
#if LANG_CXX11
inline void TryImproveRequest::set_seed(::std::string&& value) {
  set_has_seed();
  seed_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TryImproveRequest.seed)
}
#endif
inline void TryImproveRequest::set_seed(const char* value) {
  set_has_seed();
  seed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TryImproveRequest.seed)
}
inline void TryImproveRequest::set_seed(const char* value, size_t size) {
  set_has_seed();
  seed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TryImproveRequest.seed)
}
inline ::std::string* TryImproveRequest::mutable_seed() {
  set_has_seed();
  // @@protoc_insertion_point(field_mutable:TryImproveRequest.seed)
  return seed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TryImproveRequest::release_seed() {
  // @@protoc_insertion_point(field_release:TryImproveRequest.seed)
  clear_has_seed();
  return seed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TryImproveRequest::set_allocated_seed(::std::string* seed) {
  if (seed != NULL) {
    set_has_seed();
  } else {
    clear_has_seed();
  }
  seed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), seed);
  // @@protoc_insertion_point(field_set_allocated:TryImproveRequest.seed)
}

// optional int32 iters = 7;
inline bool TryImproveRequest::has_iters() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TryImproveRequest::set_has_iters() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TryImproveRequest::clear_has_iters() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TryImproveRequest::clear_iters() {
  iters_ = 0;
  clear_has_iters();
}
inline ::google::protobuf::int32 TryImproveRequest::iters() const {
  // @@protoc_insertion_point(field_get:TryImproveRequest.iters)
  return iters_;
}
inline void TryImproveRequest::set_iters(::google::protobuf::int32 value) {
  set_has_iters();
  iters_ = value;
  // @@protoc_insertion_point(field_set:TryImproveRequest.iters)
}

// optional int32 maxbest = 8;
inline bool TryImproveRequest::has_maxbest() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TryImproveRequest::set_has_maxbest() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TryImproveRequest::clear_has_maxbest() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TryImproveRequest::clear_maxbest() {
  maxbest_ = 0;
  clear_has_maxbest();
}
inline ::google::protobuf::int32 TryImproveRequest::maxbest() const {
  // @@protoc_insertion_point(field_get:TryImproveRequest.maxbest)
  return maxbest_;
}
inline void TryImproveRequest::set_maxbest(::google::protobuf::int32 value) {
  set_has_maxbest();
  maxbest_ = value;
  // @@protoc_insertion_point(field_set:TryImproveRequest.maxbest)
}

// -------------------------------------------------------------------

// TryImproveResponse

// repeated bytes inputs = 1;
inline int TryImproveResponse::inputs_size() const {
  return inputs_.size();
}
inline void TryImproveResponse::clear_inputs() {
  inputs_.Clear();
}
inline const ::std::string& TryImproveResponse::inputs(int index) const {
  // @@protoc_insertion_point(field_get:TryImproveResponse.inputs)
  return inputs_.Get(index);
}
inline ::std::string* TryImproveResponse::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:TryImproveResponse.inputs)
  return inputs_.Mutable(index);
}
inline void TryImproveResponse::set_inputs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TryImproveResponse.inputs)
  inputs_.Mutable(index)->assign(value);
}
inline void TryImproveResponse::set_inputs(int index, const char* value) {
  inputs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TryImproveResponse.inputs)
}
inline void TryImproveResponse::set_inputs(int index, const void* value, size_t size) {
  inputs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TryImproveResponse.inputs)
}
inline ::std::string* TryImproveResponse::add_inputs() {
  // @@protoc_insertion_point(field_add_mutable:TryImproveResponse.inputs)
  return inputs_.Add();
}
inline void TryImproveResponse::add_inputs(const ::std::string& value) {
  inputs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TryImproveResponse.inputs)
}
inline void TryImproveResponse::add_inputs(const char* value) {
  inputs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TryImproveResponse.inputs)
}
inline void TryImproveResponse::add_inputs(const void* value, size_t size) {
  inputs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TryImproveResponse.inputs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TryImproveResponse::inputs() const {
  // @@protoc_insertion_point(field_list:TryImproveResponse.inputs)
  return inputs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TryImproveResponse::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:TryImproveResponse.inputs)
  return &inputs_;
}

// repeated double score = 2;
inline int TryImproveResponse::score_size() const {
  return score_.size();
}
inline void TryImproveResponse::clear_score() {
  score_.Clear();
}
inline double TryImproveResponse::score(int index) const {
  // @@protoc_insertion_point(field_get:TryImproveResponse.score)
  return score_.Get(index);
}
inline void TryImproveResponse::set_score(int index, double value) {
  score_.Set(index, value);
  // @@protoc_insertion_point(field_set:TryImproveResponse.score)
}
inline void TryImproveResponse::add_score(double value) {
  score_.Add(value);
  // @@protoc_insertion_point(field_add:TryImproveResponse.score)
}
inline const ::google::protobuf::RepeatedField< double >&
TryImproveResponse::score() const {
  // @@protoc_insertion_point(field_list:TryImproveResponse.score)
  return score_;
}
inline ::google::protobuf::RepeatedField< double >*
TryImproveResponse::mutable_score() {
  // @@protoc_insertion_point(field_mutable_list:TryImproveResponse.score)
  return &score_;
}

// optional int32 iters_tried = 3;
inline bool TryImproveResponse::has_iters_tried() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TryImproveResponse::set_has_iters_tried() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TryImproveResponse::clear_has_iters_tried() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TryImproveResponse::clear_iters_tried() {
  iters_tried_ = 0;
  clear_has_iters_tried();
}
inline ::google::protobuf::int32 TryImproveResponse::iters_tried() const {
  // @@protoc_insertion_point(field_get:TryImproveResponse.iters_tried)
  return iters_tried_;
}
inline void TryImproveResponse::set_iters_tried(::google::protobuf::int32 value) {
  set_has_iters_tried();
  iters_tried_ = value;
  // @@protoc_insertion_point(field_set:TryImproveResponse.iters_tried)
}

// optional int32 iters_better = 4;
inline bool TryImproveResponse::has_iters_better() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TryImproveResponse::set_has_iters_better() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TryImproveResponse::clear_has_iters_better() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TryImproveResponse::clear_iters_better() {
  iters_better_ = 0;
  clear_has_iters_better();
}
inline ::google::protobuf::int32 TryImproveResponse::iters_better() const {
  // @@protoc_insertion_point(field_get:TryImproveResponse.iters_better)
  return iters_better_;
}
inline void TryImproveResponse::set_iters_better(::google::protobuf::int32 value) {
  set_has_iters_better();
  iters_better_ = value;
  // @@protoc_insertion_point(field_set:TryImproveResponse.iters_better)
}

// -------------------------------------------------------------------

// HelperRequest

// optional .PlayFunRequest playfun = 1;
inline bool HelperRequest::has_playfun() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HelperRequest::set_has_playfun() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HelperRequest::clear_has_playfun() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HelperRequest::clear_playfun() {
  if (playfun_ != NULL) playfun_->::PlayFunRequest::Clear();
  clear_has_playfun();
}
inline const ::PlayFunRequest& HelperRequest::playfun() const {
  // @@protoc_insertion_point(field_get:HelperRequest.playfun)
  return playfun_ != NULL ? *playfun_
                         : *::PlayFunRequest::internal_default_instance();
}
inline ::PlayFunRequest* HelperRequest::mutable_playfun() {
  set_has_playfun();
  if (playfun_ == NULL) {
    playfun_ = new ::PlayFunRequest;
  }
  // @@protoc_insertion_point(field_mutable:HelperRequest.playfun)
  return playfun_;
}
inline ::PlayFunRequest* HelperRequest::release_playfun() {
  // @@protoc_insertion_point(field_release:HelperRequest.playfun)
  clear_has_playfun();
  ::PlayFunRequest* temp = playfun_;
  playfun_ = NULL;
  return temp;
}
inline void HelperRequest::set_allocated_playfun(::PlayFunRequest* playfun) {
  delete playfun_;
  playfun_ = playfun;
  if (playfun) {
    set_has_playfun();
  } else {
    clear_has_playfun();
  }
  // @@protoc_insertion_point(field_set_allocated:HelperRequest.playfun)
}

// optional .TryImproveRequest tryimprove = 2;
inline bool HelperRequest::has_tryimprove() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HelperRequest::set_has_tryimprove() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HelperRequest::clear_has_tryimprove() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HelperRequest::clear_tryimprove() {
  if (tryimprove_ != NULL) tryimprove_->::TryImproveRequest::Clear();
  clear_has_tryimprove();
}
inline const ::TryImproveRequest& HelperRequest::tryimprove() const {
  // @@protoc_insertion_point(field_get:HelperRequest.tryimprove)
  return tryimprove_ != NULL ? *tryimprove_
                         : *::TryImproveRequest::internal_default_instance();
}
inline ::TryImproveRequest* HelperRequest::mutable_tryimprove() {
  set_has_tryimprove();
  if (tryimprove_ == NULL) {
    tryimprove_ = new ::TryImproveRequest;
  }
  // @@protoc_insertion_point(field_mutable:HelperRequest.tryimprove)
  return tryimprove_;
}
inline ::TryImproveRequest* HelperRequest::release_tryimprove() {
  // @@protoc_insertion_point(field_release:HelperRequest.tryimprove)
  clear_has_tryimprove();
  ::TryImproveRequest* temp = tryimprove_;
  tryimprove_ = NULL;
  return temp;
}
inline void HelperRequest::set_allocated_tryimprove(::TryImproveRequest* tryimprove) {
  delete tryimprove_;
  tryimprove_ = tryimprove;
  if (tryimprove) {
    set_has_tryimprove();
  } else {
    clear_has_tryimprove();
  }
  // @@protoc_insertion_point(field_set_allocated:HelperRequest.tryimprove)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::TryImproveRequest_Approach> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TryImproveRequest_Approach>() {
  return ::TryImproveRequest_Approach_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_marionet_2eproto__INCLUDED
